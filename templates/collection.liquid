{% assign lang = request.locale.iso_code %}
<p class="current_lang" data-lang="{{ lang }}" style="display: none;">
  {{ lang }}
</p>

<section class="section_pageTitle">
  <div class="subWrap_pageTitle">
    <h2 class="pageTitle">{{ "filters_badminton.word_badminton" | t }}
      <span class="pageTitle_all">{{ "filters_badminton.word_initial" | t }}</span>
      <span class="pageTitle_filter" style="display: none;"></span>
    </h2>
  </div>
</section>
<section class="filterSection_FILTERS">
  <div class="filterBox_D" data-no_scrollbar>
    <div class="filter all active" data-filter="all" >
      <div class="click_overlay"></div>
      <p>{{ "filters_badminton.all" | t }}</p>
    </div>
    <!--
    <div class="filter" data-filter="sale" data-hover_grey >
      <div class="click_overlay"></div>
      <img class="icon_filter" src="{{ 'icon_filter_sale.png' | asset_url }}" alt="">
      <p>{{ "filters_badminton.sale" | t }}</p>
    </div>
    <div class="filter" data-filter="racket" data-hover_grey >
      <div class="click_overlay"></div>
      <img class="icon_filter" src="{{ 'icon_filter_racket.png' | asset_url }}" alt="">
      <p>{{ "filters_badminton.rackets" | t }}</p>
    </div>
    -->
    <div class="filter" data-filter="ball" data-hover_grey >
      <div class="click_overlay"></div>
      <img class="icon_filter" src="{{ 'icon_filter_ball.png' | asset_url }}" alt="Badminton shuttlecock">
      <p>{{ "filters_badminton.balls" | t }}</p>
    </div>
    <!-- 
    <div class="filter" data-filter="clothing" data-hover_grey >
      <div class="click_overlay"></div>
      <img class="icon_filter" src="{{ 'icon_filter_clothing.png' | asset_url }}" alt="">
      <p>{{ "filters_badminton.clothing" | t }}</p>
    </div>
    <div class="filter" data-filter="equipment" data-hover_grey >
      <div class="click_overlay"></div>
      <img class="icon_filter" src="{{ 'icon_filter_equipment.png' | asset_url }}" alt="">
      <p>{{ "filters_badminton.equipment" | t }}</p>
    </div> 
    --> 
  </div>
  <div class="btn_openFilters" data-toggle="filters" >
    <img class="icon_filter hide" id="icon_currentFilter" src="{{ 'icon_filter_racket.png' | asset_url }}" alt="Currently active filter icon">
    <p class="text_currentFilter">{{ "filters_badminton.all" | t }}</p>
    <img class="icon_arrowDropdown" src="{{ 'icon_arrow.svg' | asset_url }}" alt="Grey arrow pointing down">
  </div>
</section>
<div class="section_itemCount">
  <div class="container_itemCount">
    <p>
      {{ "filters_badminton.results" | t }}
      <span class="filter_count">{{ collections['all'].products.size }}</span>
    </p>
  </div>
</div>
<section class="section_product">
  <div class="product_grid">
    {% assign allProducts = collections['all'].products %}
    {% for product in allProducts %}
      {% if product.available %}
        <a href="{{ product.url }}" class="product" data-filter_word="{{ product.metafields.custom.filter_word}}" data-sale="{{ product.metafields.custom.sale}}">
          <div class="product_TOP">
            <img class="img_product_filterPage" src="{{ product.featured_image | img_url: '600x600' }}" alt="{{ product.title }}{{ product.featured_image.alt | escape }}">
            <img class="img_wave" src="{{ 'img_WAVE_filterPage.svg' | asset_url }}" alt="Colorful wave" data-color_bg="{{ product.metafields.custom.color_bg}}">
            <p class="textIcon_sale" data-isSale="{{ product.metafields.custom.sale}}">
              {% assign a = product.compare_at_price_max | divided_by: 1.0 %}
              {% assign b = product.price | divided_by: 1.0 %}
              {% assign discount = ((a | minus: b) | divided_by: a) | times: 100 %}-{{ discount | round: 0 }}%
            </p>

            <!-- generate color option/filter bubbles -->
            {% if product.options contains 'Color' %}
              <div class="wrap_collorBubbles">
                {% for option in product.options_with_values %}
                  {% if option.name == 'Color' %}
                    {% for value in option.values %}
                      {% assign raw_inSearch = value | split: ' ' | last %}

                      {% for variant in product.variants %}
                        {% assign var_raw = variant.option1 | split: ' ' | last %}
                        {% if var_raw == raw_inSearch and variant.available %}
                          <div class="colorBubble" style="background-color: {{ raw_inSearch }}"></div>
                          {% break %}
                        {% endif %}
                      {% endfor %}

                    {% endfor %}
                  {% endif %}
                {% endfor %}
              </div>
            {% endif %}
          </div>
          <div class="product_BOTTOM">
            <h4 class="title_product_filterPage">{{ product.metafields.custom.name_short }}</h4>
            <div class="priceWrap_filterPage">
              <p class="price_product_filterPage" data-isSale="{{ product.metafields.custom.sale}}">{{ product.price | money }}</p>
              <p class="price_product_filterPage compare">{{ product.compare_at_price | money }}</p>
            </div>
          </div>
          <div class="click_overlay"></div>
        </a>
      {% endif %}
    {% endfor %}
  </div>
</section>
<div class="filterBox_M" data-visible="false">
  <div class="textWrap_filters_M">
    <h4>{{ "filters_badminton.word_filters" | t }}</h4>
    <div class="btn_X" data-toggle="filters">
      <div class="line_X"></div>
      <div class="line_X second"></div>
    </div>
  </div>
  <div class="filter all active" data-filter="all" >
    <div class="click_overlay"></div>
    <p>{{ "filters_badminton.all" | t }}</p>
    <p class="category_item_count" data-category_count="all">2</p>
  </div>
  <!--
  <div class="filter" data-filter="sale" >
    <div class="click_overlay"></div>
    <img class="icon_filter" src="{{ 'icon_filter_sale.png' | asset_url }}" alt="">
    <p>{{ "filters_badminton.sale" | t }}</p>
    <p class="category_item_count" data-category_count="sale">2</p>
  </div>
  <div class="filter" data-filter="racket" >
    <div class="click_overlay"></div>
    <img class="icon_filter" src="{{ 'icon_filter_racket.png' | asset_url }}" alt="">
    <p>{{ "filters_badminton.rackets" | t }}</p>
    <p class="category_item_count" data-category_count="racket">2</p>
  </div> 
  -->
  <div class="filter" data-filter="ball" >
    <div class="click_overlay"></div>
    <img class="icon_filter" src="{{ 'icon_filter_ball.png' | asset_url }}" alt="Badminton shuttlecock">
    <p>{{ "filters_badminton.balls" | t }}</p>
    <p class="category_item_count" data-category_count="ball">2</p>
  </div>
  <!--
  <div class="filter" data-filter="clothing" >
    <div class="click_overlay"></div>
    <img class="icon_filter" src="{{ 'icon_filter_clothing.png' | asset_url }}" alt="">
    <p>{{ "filters_badminton.clothing" | t }}</p>
    <p class="category_item_count" data-category_count="clothing">2</p>
  </div>
  <div class="filter" data-filter="equipment" >
    <div class="click_overlay"></div>
    <img class="icon_filter" src="{{ 'icon_filter_equipment.png' | asset_url }}" alt="">
    <p>{{ "filters_badminton.equipment" | t }}</p>
    <p class="category_item_count" data-category_count="equipment">2</p>
  </div>
  -->
</div>


<script>

const GENERAL = (() => {
  function ISdesktop() {
    return window.innerWidth > 991 ? true : false
  }
  function GETviewportSize() {
    return window.innerWidth > 1439 ? 'desktop_big' :
            window.innerWidth > 991 ? 'desktop' :
            window.innerWidth > 767 ? 'tablet' :
            'mobile';
}
  function SCROLLtoTop() {
    if (ISdesktop() || GETviewportSize() == "tablet") {window.scrollTo({top: 120, behavior: "smooth", duration: 2000})}
    else {setTimeout(() => {window.scrollTo({top: 0, behavior: "smooth", duration: 2000})}, 150)}
  }
  function MOVEwaves() {
    const waves = document.querySelectorAll('.img_wave')
      waves.forEach(wave => {
          let scrollY = window.scrollY;
          if (scrollY < 5) {scrollY = 5}
          const scrollFactor = 30 / 100;
          const moveWave = -scrollY * scrollFactor;
          wave.style.transform = `translateX(${moveWave}px)`;
      })
  } 

  return { ISdesktop, GETviewportSize, SCROLLtoTop, MOVEwaves }
})();
const URL = (() => {
  function DETECTpreviousPageVisit() {
    if (performance && performance.navigation) {
      if (performance.navigation.type === 2) {
        // The user is navigating back to a previous page
        console.log("User clicked back button.");
      }
    }
  }
  function CHECKforReload() {
    if (performance.navigation.type === performance.navigation.TYPE_RELOAD) {
        _EMPTYurl()
        window.scrollTo({top: 0, behavior: "smooth", duration: 2000})
      }
  }
  function _EMPTYurl() {
    const DOESurlContainFilterWord = window.location.search.includes('filter=')
    if (!DOESurlContainFilterWord) return;
    var urlWithoutParams = window.location.origin + window.location.pathname;
    history.replaceState({}, document.title, urlWithoutParams);
}
  function UPDATEurl(filterWord) {
      const url = new URLParse(window.location.href, true)
      url.query.filter = filterWord
      window.history.replaceState(null, null, url.toString())
    }


  return { DETECTpreviousPageVisit, CHECKforReload, UPDATEurl }
})();
const FILTER = (() => {
  function FILTERitems(filterWORD) {
    let count = 0
    const allPoductDIVS = document.querySelectorAll('.product')
    allPoductDIVS.forEach(productDIV => {
        if (filterWORD == 'all' || productDIV.dataset.filter_word == filterWORD){productDIV.style.display = 'flex'; count++}
        else if (filterWORD == 'sale' && productDIV.dataset.sale == "true") {productDIV.style.display = 'flex'; count++}
        else {productDIV.style.display = 'none'}
    })
    const filteredResultsTEXT = document.querySelector('.filter_count')
    filteredResultsTEXT.textContent = count    
  } 
  function FILTERitemsOnLoad() {
      const urlTag = new URLSearchParams(window.location.search);
      const urlFilterWORD = urlTag.get('filter');

      if (!urlFilterWORD) return;
      FILTERitems(urlFilterWORD)
      TOGGLEactiveFilter(urlFilterWORD)
      HANDLEfilterText(urlFilterWORD) 
  }
  
  function TOGGLEactiveFilter(filterTAG) {    //separate funtion because of filtering on load with URL
      let word_activeBtn
      const filters_ALL = document.querySelectorAll('.filter')
      filters_ALL.forEach(y => { 
      if (y.dataset.filter == filterTAG){y.classList.add('active'); word_activeBtn = y.lastElementChild.textContent} else {y.classList.remove('active')}   
      })      
  }
  function HANDLEfilterText(filterTAG) {
      const icon_current = document.getElementById('icon_currentFilter')
      const btnText = document.querySelector('.text_currentFilter')
      const pageTitle_all = document.querySelector('.pageTitle_all')
      const pageTitle_filter = document.querySelector('.pageTitle_filter')

      const targetFilter = document.querySelector(`.filter[data-filter="${filterTAG}"`)

      if (filterTAG == "all") {
          icon_current.classList.add('hide')
          pageTitle_all.style.display = "inline"
          pageTitle_filter.style.display = "none"

      } else {
          icon_current.classList.remove('hide') 
          icon_current.src = targetFilter.querySelector('img').src
          pageTitle_all.style.display = "none"
          pageTitle_filter.style.display = "inline"
          pageTitle_filter.textContent = targetFilter.querySelector('p').textContent
      }
      btnText.textContent = targetFilter.querySelector('p').textContent
  }
  function TOGGLEfilterBox() {
    const fiterBOX = document.querySelector('.filterBox_M')
    const ISfilterBoxOpen = (fiterBOX.dataset.visible === "true");

    if (!ISfilterBoxOpen) {
      _OPENfilterBox(fiterBOX)
      return;
    }
    _CLOSEfilterBox(fiterBOX)
}
  function SHUFFLEproducts() {
    const products = Array.from(document.getElementsByClassName('product'));
    products.sort(() => Math.random() - 0.5);
    products.forEach(item => document.querySelector('.product_grid').appendChild(item));
  }
  function COUNTcategoryItems() {
    const texts = document.querySelectorAll('[data-category_count]')
    texts.forEach(x => {
        const word = x.dataset.category_count
        word == "all" ? x.textContent = document.querySelectorAll('.product').length
        : word == "sale" ? x.textContent = document.querySelectorAll('.product[data-sale="true"]').length
        : x.textContent = document.querySelectorAll(`.product[data-filter_word="${x.dataset.category_count}"`).length
    })
}

  function _OPENfilterBox(targetFilterBOX) {
    targetFilterBOX.style.display = 'flex'
    setTimeout(() => {targetFilterBOX.setAttribute('data-visible', 'true')}, 10);
  }
  function _CLOSEfilterBox(targetFilterBOX) {
    targetFilterBOX.setAttribute('data-visible', 'false')
    setTimeout(() => {targetFilterBOX.style.display = 'none'}, 151);  
  }
  return { FILTERitems, TOGGLEactiveFilter, HANDLEfilterText, TOGGLEfilterBox, FILTERitemsOnLoad, SHUFFLEproducts, COUNTcategoryItems }
})();
const EVENTS = (() => {

  function SETfilterToggles() {
    const filters_ALL = document.querySelectorAll('.filter')
    const filterToggles = document.querySelectorAll('div[data-toggle="filters"]') // open btn + X
    filterToggles.forEach(x => x.addEventListener('click', FILTER.TOGGLEfilterBox))
    filters_ALL.forEach(x => x.addEventListener('click', (e) => {
        const filterWord = e.currentTarget.dataset.filter
        FILTER.TOGGLEactiveFilter(filterWord)
        FILTER.FILTERitems(filterWord)
        FILTER.HANDLEfilterText(filterWord)
        URL.UPDATEurl(filterWord)
        GENERAL.SCROLLtoTop()
        if(GENERAL.GETviewportSize() == "mobile"){setTimeout(() => {FILTER.TOGGLEfilterBox()}, 150)}
    })	
    )
    
  }
  return { SETfilterToggles }
})();

window.addEventListener('resize', () => {
    ADJUSTnavShadow();
    if (/Mobi/i.test(navigator.userAgent)) return;
    document.querySelector('.filterBox_M').setAttribute('data-visible', 'false')
})
window.addEventListener('DOMContentLoaded', () => {
    URL.CHECKforReload()
    FILTER.FILTERitemsOnLoad()
    FILTER.SHUFFLEproducts()
    FILTER.COUNTcategoryItems()
    ADJUSTnavShadow()
    document.querySelector('.product_grid').style.opacity = "100%";
    EVENTS.SETfilterToggles()
})
window.addEventListener('scroll', () => {
    GENERAL.MOVEwaves()
    ADJUSTnavShadow()
})
window.addEventListener("popstate", URL.DETECTpreviousPageVisit);



function ADJUSTnavShadow() {
    const nav = document.querySelector('nav')
    window.scrollY < 60 ? nav.classList.add('no_shadow') : nav.classList.remove('no_shadow')
}





//-------------------------------



</script>

