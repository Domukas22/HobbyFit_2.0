{% assign uniqueIDs = cart.items | map: 'id' | uniq %}

{% assign lang = request.locale.iso_code %}
<p
  class="current_lang"
  data-lang="{{ lang }}"
  style="display: none;">{{ lang }}
</p>

<div class="fixedBuyBOX">
  <div class="btn cart buy fixed" >
    <p style="display: flex; width: 100%;">{{ "cart.btnWord_main" | t }} (<span data-final_item_count>{{ cart.item_count }}</span>
      &nbsp;{{ "product.word_item" | t }})<span data-final_price style="margin-left: auto;">{{ cart.total_price | money }}</span>
    </p>
  </div>
</div>
<section class="section_pageTitle cart">
  <div class="subWrap_pageTitle cart">
    <h2 class="pageTitle cart">{{ "cart.cart" | t }}</h2>
  </div>
</section>

<section class="cartPageSECTION">
  {% form 'cart', cart, class: 'container container_cartItems' %}

    <div class="cartItemGRID">
      {% if cart.item_count > 0 %}
        {% for item in cart.items reverse %}

          {% assign bgCOLOR = item.image.alt | split: " " | slice: -2, 1 | first %}
          {% assign rawCOLOR = item.image.alt | split: " " | last %}
          {% assign size_option = item.options_with_values | where: "name", "Size" | first %}

          <div class="cartITEM" data-variantid="{{ item.variant.id }}" data-qnt_selected="{{ item.quantity }}" data-qnt_left="{{ item.variant.inventory_quantity }}">
            <div class="cartItemTOP">
              <div class="cartItemTitleWRAP">
                <h4 class="cartItemTITLE">{{ item.product.metafields.custom.name_short }} (<span data-variantid="{{ item.variant.id }}" data-variantQNT>{{ item.quantity }}</span>)</h4>
                <p style="color: rgba(0,0,0, 0.65);">{{ item.product.metafields.custom.what_item_short }} {{ item.product.metafields.custom.extra_text }}
                  {% if size_option %}/ {{ size_option.value }}{% endif %}
                </p>
              </div> 
              <img class="cartItemIMAGE" src="{{ (item.variant.featured_image | default: item.product.featured_image) | img_url: '500x500' }}" alt="{{ item.product.title }}{{ item.product.featured_image.alt }}">
              <img class="cartItemWaveIMG" src="{{ 'img_WAVE_cartItem.svg' | asset_url }}" alt="Colorful wave" style="background-color: {{ bgCOLOR }}">
              <div class="clickOVERLAY variantURL" data-variantid="{{ item.variant.id }}" data-rawcolor="{{ rawCOLOR }}" data-bgcolor="{{ bgCOLOR }}" data-varianturl="{{ shop.url }}{{ item.product.url }}"></div>
            </div>
            <div class="cartItemBOTTOM" style="background-color: {{ bgCOLOR }}">
              
              <div class="actionBOX" data-open="false" data-variantid="{{ item.variant.id }}">
                <div class="qntFRONT" data-variantid="{{ item.variant.id }}" style="color: {{ rawCOLOR }}; background-color: {{ bgCOLOR }}">
                  <div class="showActionBTN" data-hover_grey data-variantid="{{ item.variant.id }}">
                      <p style="color: {{ rawCOLOR }}; margin-right: 8px; font-size: 17px; display: flex">
                        <span class="word_qnt d">{{ "cart.qnt" | t }}</span>
                        <span class="word_qnt m">{{ "cart.qnt_short" | t }}</span>
                        &nbsp;<span class="variantQNT" data-variantQNT="{{ item.quantity }}" data-variantid="{{ item.variant.id }}">{{ item.quantity }}</span>
                      </p>
                      <p class="totalVariantPRICE" style="color: {{ rawCOLOR }}; font-size: 17px" data-variantid="{{ item.variant.id }}" data-price_for_one="{{ item.price }}">{{ item.final_line_price | money }}</p>
                  </div>
                  <a class="deleteItemBTN" href="{{ item.url_to_remove }}">
                    <img src="{{ 'icon_delete_red.svg' | asset_url }}" alt="Garbage bin icon">
                    <div class="clickOVERLAY"></div>
                  </a>
                </div>
                <div class="qntBACK" data-variantid="{{ item.variant.id }}" style="color: {{ rawCOLOR }}; background-color: {{ bgCOLOR }}">
                  <div class="qntBackTopWRAP">
                    <input class="fakeQntInput" data-tochooseqnt="{{ item.variant.inventory_quantity }}" data-variantid="{{ item.variant.id }}" onkeydown="QNT.HANDLEfakeQntSubmit(event, this);" type="number" name="fake" placeholder="{{ "product.word_qntInput" | t }}" style="font-size: 17px">
                    <div class="qntActionBTN cancel" data-variantid="{{ item.variant.id }}">{{ "product.word_cancel" | t }}</div>
                    <div class="qntActionBTN submit" data-variantid="{{ item.variant.id }}" data-visible="false" style="background-color: {{ rawCOLOR }};">{{ "product.word_submit" | t }}</div>
                  </div>
                  <div class="qntBtnWRAP desk back">
                    {% for i in (1..item.variant.inventory_quantity) %}
                      {% if i > 12 %}{% break %}{% endif %}
                      <div class="qntBTN qntMobBACK {% if i == 12 or i == item.variant.inventory_quantity%}last{% endif %}"
                          data-selected="{% if i == item.quantity or (i == 12 and item.quantity > 12)%}true{% else %}false{% endif %}"
                          data-value="{{ i }}" data-bgCOLOR="{{ bgCOLOR }}" data-rawCOLOR="{{ rawCOLOR }}" data-variantid="{{ item.variant.id }}" data-visible="true">
                          {% if i == 12 and item.quantity > 12 %} {{ item.quantity }} {% else %} {{ i }} {% endif %}
                      </div>
                    {% endfor %}
                  </div>
                  <div class="qntBtnWRAP mob back">
                    {% for i in (1..item.variant.inventory_quantity) %}
                    {% if i > 10 %}{% break %}{% endif %}
                    <div class="qntBTN qntMobBACK {% if i == 10 or i == item.variant.inventory_quantity%}last{% endif %}"
                        data-selected="{% if i == item.quantity or (i == 10 and item.quantity > 10)%}true{% else %}false{% endif %}"
                        data-value="{{ i }}" data-bgCOLOR="{{ bgCOLOR }}" data-rawCOLOR="{{ rawCOLOR }}" data-variantid="{{ item.variant.id }}" data-visible="true">
                        {% if i == 10 and item.quantity > 10 %} {{ item.quantity }} {% else %} {{ i }} {% endif %}
                    </div>
                  {% endfor %}
                  </div>
                </div>
              </div>
              <p class="qntERROR" data-variantid="{{ item.variant.id }}">{{ "alerts.red_qnt_pre" | t }} {{ item.variant.inventory_quantity }} {{ "alerts.red_qnt_post" | t }}</p>
            </div>


          </div>
        {% endfor %}
      {% endif %}


      {% if cart.item_count == 0 %}
        <a class="empty_cart_slot empty" href="{{ collections['badmintono-prekes'].url }}">
          <div class="wrap_plus">
            <div class="line_plus"></div>
            <div class="line_plus second"></div>
          </div>
          {{ "cart.new_item" | t }}
        </a>
      {% else %}
        <a class="empty_cart_slot" href="{{ collections['badmintono-prekes'].url }}">
          <div class="wrap_plus">
            <div class="line_plus"></div>
            <div class="line_plus second"></div>
          </div>
          {{ "cart.new_item" | t }}
        </a>
      {% endif %}


    </div>

    <div class="stickyWrap_checkout" {% if cart.item_count == 0 %} style="margin-bottom: 16px;" {% endif %}>
      <div class="subWrap_stickyBox">
        {% if cart.item_count > 0 %}
          <div class="box_proceedCheckout">
            <div class="checkoutBox_TOP">
              <h4 class="title_Summary">{{ "cart.cart" | t }} (<span data-final_item_count>{{ cart.item_count }}</span>):</h4>
              <h4 data-final_price style="margin-left: auto; color: #407ff2;">{{ cart.total_price | money }}</h4>
            </div>
            <div class="checkoutBox_BOTTOM" data-freeshipping>
              <div class="shippingALERT free">
                <img
                  class="icon_checkmark"
                  src="{{ 'icon_checkmark.svg' | asset_url }}"
                  alt="Green checkmark icon">
                <p>{{ "cart.freeShipping_yes" | t }}</p>
              </div>
              <div class="shippingALERT paid">
                <p>{{ "cart.freeShipping_no_pre" | t }}<b>
                    <span class="amountLeftForFreeShippingTEXT">{{ 7000 | minus: cart.total_price | money }}</span>
                  </b>
                  {{ "cart.freeShipping_no_post" | t }}</p>
                <div class="wrap_shippingLines">
                  <div class="shippingLine bgCOLOR"></div>
                  <div class="shippingLine grow"></div>
                </div>
              </div>
              <div class="btn cart buy" >{{ "cart.btnWord_main" | t }}</div>
            </div>
          </div>
          <p class="text_separator">{{ "cart.your_items" | t }} (<span data-final_item_count>{{ cart.item_count }}</span>)</p>
          <div class="box_itemPreview">
            {% if cart.item_count > 0 %}
              {% for item in cart.items reverse %}
                {% assign bgCOLOR = item.image.alt | split: " " | slice: -2, 1 | first %}
                {% assign rawCOLOR = item.image.alt | split: " " | last %}
                {% assign size_option = item.options_with_values | where: "name", "Size" | first %}

                <div class="itemPreview" data-variantid="{{ item.variant.id }}" >
                  <div class="imgWarp_itemPreview">
                    <img src="{{ (item.variant.featured_image | default: item.product.featured_image) | img_url: '500x500' }}" alt="{{ item.product.title }}{{ item.product.featured_image.alt }}" class="img_cartPreview">
                  </div>

                  <div class="wrap_previewFeatures">
                    <div class="variantPreviewQNT" style="background-color: {{ bgCOLOR }}; color: {{ rawCOLOR }}" data-hover_grey data-variantid="{{ item.variant.id }}">
                      {{ item.quantity }}
                    </div>
                    {% if size_option %}
                      <div class="variantPreviewQNT" style="background-color: {{ bgCOLOR }}; color: {{ rawCOLOR }}" data-hover_grey>
                        "{{ size_option.value }}"
                      </div>
                    {% endif %}
                  </div>
                </div>
              {% endfor %}
              {% if uniqueIDs.size == 1 %}
                <a class="itemPreview empty"  data-hover_grey href="{{ collections['badmintono-prekes'].url }}">
                  <div class="wrap_plus">
                    <div class="qnt_line"></div>
                    <div class="qnt_line vertical"></div>
                  </div>
                </a>
                <a class="itemPreview empty"  data-hover_grey href="{{ collections['badmintono-prekes'].url }}">
                  <div class="wrap_plus">
                    <div class="qnt_line"></div>
                    <div class="qnt_line vertical"></div>
                  </div>
                </a>
                <a class="itemPreview empty no_mob"  data-hover_grey href="{{ collections['badmintono-prekes'].url }}">
                  <div class="wrap_plus">
                    <div class="qnt_line"></div>
                    <div class="qnt_line vertical"></div>
                  </div>
                </a>
              {% elsif uniqueIDs.size == 2 %}
                <a class="itemPreview empty"  data-hover_grey href="{{ collections['badmintono-prekes'].url }}">
                  <div class="wrap_plus">
                    <div class="qnt_line"></div>
                    <div class="qnt_line vertical"></div>
                  </div>
                </a>
                <a class="itemPreview empty no_mob"  data-hover_grey href="{{ collections['badmintono-prekes'].url }}">
                  <div class="wrap_plus">
                    <div class="qnt_line"></div>
                    <div class="qnt_line vertical"></div>
                  </div>
                </a>
              {% elsif uniqueIDs.size == 3 %}
                <a class="itemPreview empty no_mob"  data-hover_grey href="{{ collections['badmintono-prekes'].url }}">
                  <div class="wrap_plus">
                    <div class="qnt_line"></div>
                    <div class="qnt_line vertical"></div>
                  </div>
                </a>
              {% elsif uniqueIDs.size == 4 %}
                <a class="itemPreview empty no_desc"  data-hover_grey href="{{ collections['badmintono-prekes'].url }}">
                  <div class="wrap_plus">
                    <div class="qnt_line"></div>
                    <div class="qnt_line vertical"></div>
                  </div>
                </a>
                <a class="itemPreview empty no_desc"  data-hover_grey href="{{ collections['badmintono-prekes'].url }}">
                  <div class="wrap_plus">
                    <div class="qnt_line"></div>
                    <div class="qnt_line vertical"></div>
                  </div>
                </a>
              {% elsif uniqueIDs.size == 5 %}
                <a class="itemPreview empty"  data-hover_grey href="{{ collections['badmintono-prekes'].url }}">
                  <div class="wrap_plus">
                    <div class="qnt_line"></div>
                    <div class="qnt_line vertical"></div>
                  </div>
                </a>
                <a class="itemPreview empty no_mob"  data-hover_grey href="{{ collections['badmintono-prekes'].url }}">
                  <div class="wrap_plus">
                    <div class="qnt_line"></div>
                    <div class="qnt_line vertical"></div>
                  </div>
                </a>
                <a class="itemPreview empty no_mob"  data-hover_grey href="{{ collections['badmintono-prekes'].url }}">
                  <div class="wrap_plus">
                    <div class="qnt_line"></div>
                    <div class="qnt_line vertical"></div>
                  </div>
                </a>
              {% endif %}
            {% endif %}
          </div>
        {% else %}
          <div class="empty_cart_sign">
            <img class="icon_empty_cart" src="{{ "icon_bag.svg" | asset_url }}" alt="Shopping bag icon">
            <p>{{ "cart.empty" | t }}</p>
          </div>
        {% endif %}

      </div>
    </div>

  {% endform %}
</section>

{% render 'inline_slider' %}


<script>
const moneyFORMAT = "{{ shop.money_format }}";
const startingTotalCartPRICE = {{ cart.total_price }};
const startingCartOBJ = {
  {% for item in cart.items reverse %}
    {{ item.variant_id}}: {{ item.quantity }},
  {% endfor %}
};

const GENERAL = (() => {
  function ISdesktop() {
    return window.innerWidth > 991 ? true : false
  };
  function SCROLLtoY(scrollTargetY, speed) {
    const scrollY = window.scrollY || window.pageYOffset;
    let currentTime = 0;
    const easingEQUATION = (t) => {
        // Custom easing equation (ease-in-out in this case)
        return 0.5 - 0.5 * Math.cos(Math.PI * t);
    };
    const time = Math.max(0.1, Math.min(Math.abs(scrollY - scrollTargetY) / speed, 0.8));
    function tick() {
        currentTime += 1 / 60;
        const position = currentTime / time;
        if (position < 1) {
          const easing = easingEQUATION(position);
          window.requestAnimationFrame(tick);
          window.scrollTo(0, scrollY + (scrollTargetY - scrollY) * easing);
          return;
        } 
        window.scrollTo(0, scrollTargetY);
    }
    tick();
  }
  function NAVIGATEtoProductPage(id, bgCOLOR, rawCOLOR, variantURL) {
    const url = new URLParse(variantURL, true)
    url.query.variant = id
    url.query.color_bg = bgCOLOR
    url.query.color_raw = rawCOLOR
    window.history.replaceState(null, null, url.toString())
    window.location.href = url.toString();
  }
  function DISPLAYelements(list){
    list.forEach(x => {
      if (x.value) {
          x.target.classList.remove('hide') 
      } else {
          x.target.classList.add('hide') 
      }
    })
  }
  function ADJUSTnavShadow() {
    const nav = document.querySelector('nav');
    const ADDshadow = _SHOULDnavGetShadow();
    nav.setAttribute('data-hasshadow', `${ADDshadow}`)
  }
  function HANDLEfixedBuyBox(){
    const fixedBuyBOX = document.querySelector('.fixedBuyBOX')
    const SHOULDshow = (window.scrollY > 220)
    fixedBuyBOX.setAttribute('data-visible', `${SHOULDshow}`)
  }
  function ADJUSTnavDisplay(){
    const SHOULDnavBeAbsolute = (ISdesktop() === true)
    document.querySelector('body').setAttribute('data-isnavabsolute', `${SHOULDnavBeAbsolute}`)
  }
  function _SHOULDnavGetShadow() {
    const _ISdesktop = (ISdesktop() === true)
    const SCROLLEDover60 = (window.scrollY > 60)
    if (_ISdesktop && !SCROLLEDover60) {
      return false;
    }
    return true;
  } 
  
  return { ISdesktop, SCROLLtoY, NAVIGATEtoProductPage, DISPLAYelements, ADJUSTnavShadow, HANDLEfixedBuyBox, ADJUSTnavDisplay }
})();
const SHIPPING = (() => {
  function HANDLEshippingConstInfo(currentPRICE) {
    _DISPLAYshippingAlert(currentPRICE)
    _EDITshippingLine(currentPRICE)
  }
  function _DISPLAYshippingAlert(currentPRICE) {
    const checkoutBOX = document.querySelector('.checkoutBox_BOTTOM')
    const ISshippingFree = (currentPRICE >= 7000)
    const amountLeftForFreeShippingTEXT = document.querySelector('.amountLeftForFreeShippingTEXT')
    checkoutBOX.setAttribute('data-freeshipping', `${ISshippingFree}`)
    amountLeftForFreeShippingTEXT.textContent = formatMoney(7000 - currentPRICE, moneyFORMAT)
  }
  function _EDITshippingLine(currentPRICE) {
    const toGrowLINE = document.querySelector('.shippingLine.grow')
    const moneyTHRESHOLD = 7000
    const moneyDIFFERENCE = moneyTHRESHOLD - currentPRICE
    const defaultLENGTH = toGrowLINE.parentElement.getBoundingClientRect().width
    const leftPRECENTAGE = (moneyDIFFERENCE / moneyTHRESHOLD) * 100;
    const newWIDTH = defaultLENGTH * (1 - (leftPRECENTAGE / 100));
    toGrowLINE.style.width = `${newWIDTH}px`;
  }
  return { HANDLEshippingConstInfo }
})();
const CART = (() => {
  let cartOBJ = {...startingCartOBJ}
  function SELECTnewVariantQnt(targetVariantID, newQNT) {
    // I wanted the qnt functions to be fired by the same function
    // that updates the shopping cart
    _UPDATEcartObj(targetVariantID, newQNT);
    _UPDATEcart(cartOBJ);
    _UPDATEvariantTexts(targetVariantID, newQNT);
    QNT.MARKactiveQtnBtn(targetVariantID, newQNT);
    QNT.TOGGLEqntInput(false, targetVariantID);
  } 
  function _UPDATEcart(updatedCartOBJ){
    fetch('/cart/update.js', {
      method: 'POST',
      headers: {'Content-Type': 'application/json','X-Requested-With': 'XMLHttpRequest'},
      body: JSON.stringify({updates: updatedCartOBJ})
    }).then(response => response.json()).then(cartDATA => {
        _UPDATEcartTexts(cartDATA)
      });
  }
  function _UPDATEcartObj(targetVariantID, newQNT) {
    cartOBJ[targetVariantID] = newQNT
  }
  function _UPDATEcartTexts(cartDATA) {
    const { 
      items_subtotal_price: totalItemPRICE,
      item_count: totalItemCOUNT
    } = cartDATA;
    const totalPriceTEXTS = document.querySelectorAll('[data-final_price]');
    const totalItemCountTEXTS = document.querySelectorAll('[data-final_item_count]');
    totalPriceTEXTS.forEach(x => x.textContent = formatMoney(totalItemPRICE, moneyFORMAT));
    totalItemCountTEXTS.forEach(x => x.textContent = totalItemCOUNT);
    SHIPPING.HANDLEshippingConstInfo(totalItemPRICE);
  }
  function _UPDATEvariantTexts(targetVariantID, newQNT) {
    const variantQtnTEXTS = document.querySelectorAll(`[data-variantid="${targetVariantID}"][data-variantQNT]`)
    const totalVariantPriceTEXT = document.querySelector(`.totalVariantPRICE[data-variantid="${targetVariantID}"]`)
    const variantPreviewQntTEXT = document.querySelector(`.variantPreviewQNT[data-variantid="${targetVariantID}"]`)
    
    variantQtnTEXTS.forEach(x => x.textContent = newQNT);
    totalVariantPriceTEXT.textContent = formatMoney(totalVariantPriceTEXT.dataset.price_for_one * newQNT, moneyFORMAT);
    variantPreviewQntTEXT.textContent = newQNT;
    bubble_jump(variantPreviewQntTEXT)
  }
  return { SELECTnewVariantQnt }
})();
const QNT = (() => {
  
  function HANDLEqntAlertError(targetVariantID, toChooseQNT, reqQNT) {
    const targetErrorTEXT= document.querySelector(`.qntERROR[data-variantid="${targetVariantID}"`)
    const SHOULDshow = (reqQNT > toChooseQNT)
    targetErrorTEXT.setAttribute('data-visible', `${SHOULDshow}`)
  }
  function HANDLEfakeQntSubmit(event, fakeINPUT) {
    // this fucntion is called in the html
    // it's to detect an enter, or a "Go" on mobile submit
    if (event.key === "Enter" || event.keyCode === 13 || event === "Enter") {
      const fakeInputVALUE = parseInt(fakeINPUT.value)
      const targetVariantID = parseInt(fakeINPUT.dataset.variantid);
      const toChooseQNT = parseInt(fakeINPUT.dataset.tochooseqnt);

      const ALLOWsubmit = _ALLOWfakeQntSubmit(fakeInputVALUE, toChooseQNT)
      if (!ALLOWsubmit) return;

      CART.SELECTnewVariantQnt(targetVariantID,fakeInputVALUE)
      HANDLEqntAlertError(targetVariantID, toChooseQNT, fakeInputVALUE)
      TOGGLEqntSubmitBtn(false, targetVariantID)
    }
  }
  function HANDLEfakeQntInputTyping(fakeINPUT){
    const targetVariantID = parseInt(fakeINPUT.dataset.variantid);
    const toChooseQNT = parseInt(fakeINPUT.dataset.tochooseqnt);
    const reqQNT = parseInt(fakeINPUT.value);

    const ALLOWsubmit = _ALLOWfakeQntSubmit(reqQNT, toChooseQNT)
    TOGGLEqntSubmitBtn(ALLOWsubmit, targetVariantID)
    HANDLEqntAlertError(targetVariantID, toChooseQNT, reqQNT)
    if (!ALLOWsubmit)

    fakeINPUT.select();
    fakeINPUT.focus();
    return;
  }

  function TOGGLEqntInput(SHOULDopen, targetWrapID) {
    const actionBOX = document.querySelector(`.actionBOX[data-variantid="${targetWrapID}"]`)
    const qntFRONT = document.querySelector(`.qntFRONT[data-variantid="${targetWrapID}"]`)
    const qntBACK = document.querySelector(`.qntBACK[data-variantid="${targetWrapID}"]`)
    let ISopen = (actionBOX.dataset.open == "true")

    if (SHOULDopen && !ISopen) {
      _OPENactionBox(actionBOX, qntFRONT, qntBACK)
      return;
    } 
    _CLOSEactionBox(actionBOX, qntFRONT, qntBACK)
  }
  function TOGGLEqntSubmitBtn(IStrue, targetWrapID) {
      const qntSubmitBTN = document.querySelector(`.qntActionBTN.submit[data-variantid='${targetWrapID}']`)
      qntSubmitBTN.setAttribute("data-visible", `${IStrue}`) 
  }
  function MARKactiveQtnBtn(targetVariantID, targetVALUE){
    const qntBTNS = document.querySelectorAll(`.qntBTN[data-variantid="${targetVariantID}"]`);
    qntBTNS.forEach(btn => { 
      const bntID = parseInt(btn.dataset.value);
      const ISselected = (bntID === targetVALUE)
      btn.setAttribute('data-selected', `${ISselected}`)
    })
  }
  
  function _ALLOWfakeQntSubmit(fakeInputVALUE, toChooseQNT) {
    return (fakeInputVALUE !== NaN && (fakeInputVALUE !== 0) && (fakeInputVALUE <= toChooseQNT))
  }
  function _RESIZEelement(elementCLASS, height) {
    const element = document.querySelector(elementCLASS)
    element.style.height = height + 'px'
  }
  function _OPENactionBox(actionBOX, qntFRONT, qntBACK) {
    const actionBOXID = parseInt(actionBOX.dataset.variantid)

    ISqntBtnToggleLocked = true;
    actionBOX.dataset.open = 'true';
    
    qntFRONT.style.opacity = '0%'
    qntBACK.style.display = 'flex'
    _RESIZEelement(`.actionBOX[data-variantid="${actionBOXID}"]`, qntBACK.getBoundingClientRect().height)

    setTimeout(() => {
      qntFRONT.style.display = 'none';
      qntBACK.style.opacity = '100%'
    }, 60)
    
    setTimeout(() => {
      ISqntBtnToggleLocked = false
    }, 160)
    
  }
  function _CLOSEactionBox(actionBOX, qntFRONT, qntBACK) {
    const actionBOXID = parseInt(actionBOX.dataset.variantid)
    ISqntBtnToggleLocked = true
    actionBOX.dataset.open = 'false'
    
    qntBACK.style.opacity = '0%'
    qntFRONT.style.display = 'flex'
    _RESIZEelement(`.actionBOX[data-variantid="${actionBOXID}"]`, 54)

    setTimeout(() => {
      qntBACK.style.display = 'none';
      qntFRONT.style.opacity = '100%'
    }, 60)
    
    setTimeout(() => {
      ISqntBtnToggleLocked = false
    }, 160)
  }
  
  return { HANDLEfakeQntSubmit, HANDLEqntAlertError, MARKactiveQtnBtn, TOGGLEqntInput, TOGGLEqntSubmitBtn, HANDLEfakeQntInputTyping }
})();
const EVENTS = (() => {
  function SETqntBtns() {
    const cancelQntBTNS = document.querySelectorAll('.qntActionBTN.cancel')
    const submitBTNS = document.querySelectorAll('.qntActionBTN.submit')
    const showActionBTNS = document.querySelectorAll('.showActionBTN')
    const itemPREVIEWS = document.querySelectorAll('.itemPreview')
    const qntBTNS = document.querySelectorAll('.qntBTN')
    const qntTextINPUTS = document.querySelectorAll('.fakeQntInput')
    const variantItemLINKS = document.querySelectorAll('.clickOVERLAY.variantURL')
    const placeOrderBTNS = document.querySelectorAll('.btn.cart.buy')
    
    cancelQntBTNS.forEach(x => x.addEventListener('click', (e) => {
      const targetVariantID = parseInt(e.currentTarget.dataset.variantid)
      QNT.TOGGLEqntInput(false, targetVariantID);
      QNT.TOGGLEqntSubmitBtn(false, targetVariantID)
    }))
    submitBTNS.forEach(x => x.addEventListener('click', (e) => {
      const submitBtnID = e.currentTarget.dataset.variantid;
      const fakeQntInput = document.querySelector(`.fakeQntInput[data-variantid="${submitBtnID}"]`)
      QNT.HANDLEfakeQntSubmit('Enter', fakeQntInput)
    }))
    showActionBTNS.forEach(x => x.addEventListener('click', (e) => {
      QNT.TOGGLEqntInput(true, parseInt(e.currentTarget.dataset.variantid));
    }))
    itemPREVIEWS.forEach(x => x.addEventListener('click', (e) => {
        const scroll_target = document.querySelector(`.cartITEM[data-variantid="${e.currentTarget.dataset.variantid}"]`);
        if (scroll_target) {
            const targetOffsetTop = scroll_target.getBoundingClientRect().top;
            const scrollDistance = targetOffsetTop + window.scrollY - 180;
            const scrollSpeed = 1000; // Adjust the scroll speed as desired (in pixels per second)
            GENERAL.SCROLLtoY(scrollDistance, scrollSpeed);
        }
    }));
    qntBTNS.forEach(x => x.addEventListener('click', (e) => {
      const targetBTN = e.currentTarget
      const targetVariantID = parseInt(targetBTN.dataset.variantid)
      const newQNT = parseInt(targetBTN.dataset.value)
      CART.SELECTnewVariantQnt(targetVariantID, newQNT)
    }))
    qntTextINPUTS.forEach(x => x.addEventListener('input', (e) => {
      QNT.HANDLEfakeQntInputTyping(e.currentTarget)
    }))
    variantItemLINKS.forEach(x => x.addEventListener('click', (e) => {
      const pressedLINK = e.currentTarget;
      const targetVariantID = parseInt(pressedLINK.dataset.variantid);
      const bgCOLOR = pressedLINK.dataset.bgcolor;
      const rawCOLOR = pressedLINK.dataset.rawcolor;
      const variantURL = pressedLINK.dataset.varianturl;
      GENERAL.NAVIGATEtoProductPage(targetVariantID, bgCOLOR, rawCOLOR, variantURL)
    }))
    placeOrderBTNS.forEach(x => x.addEventListener('click', () => {
      window.location.href = '{{ shop.url }}/{% if lang == 'en' %}checkout{% else %}{{ lang }}/checkout{% endif %}'
    }))
  }

  return { SETqntBtns }
})();  
window.addEventListener('DOMContentLoaded', () => {
    SHIPPING.HANDLEshippingConstInfo(startingTotalCartPRICE);
    GENERAL.ADJUSTnavShadow();
    GENERAL.ADJUSTnavDisplay()
    EVENTS.SETqntBtns()
    document.querySelector('nav').setAttribute('data-shadow_threshold', '-1')
})
window.addEventListener('scroll', () => {
  GENERAL.ADJUSTnavShadow()
  GENERAL.HANDLEfixedBuyBox()
})
window.addEventListener('resize', () => {
  GENERAL.ADJUSTnavShadow();
  GENERAL.ADJUSTnavDisplay()

})


</script>

{{ '6_inline_slider.js' | asset_url | script_tag }}