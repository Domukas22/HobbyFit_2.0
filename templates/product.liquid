<!-- set default colors -->
{% assign defaultBgColor = product.metafields.custom.color_bg %}
{% assign defaultRawColor = product.metafields.custom.color_raw %}

<!-- get language -->
{% assign lang = request.locale.iso_code %}
<p
  class="current_lang"
  data-lang="{{ lang }}"
  style="display: none;">{{ lang }}
</p>

<section class="section_productPage">
  <div class="container container_productPage">
    <div class="productSIDE">
      <div class="stickyDIV">
        <div class="sliderTitleWRAP" data-effect="zoom">
          <div class="container_productPage mini">
            <h4 class="title_Product">{{ product.metafields.custom.name_short }} {{ product.metafields.custom.extra_text }}</h4>
            <div class="priceWrap_productPage">
              <p class="price_product_filterPage" data-variantPrice data-isSale="{{ product.metafields.custom.sale}}" style="margin-right: 6px; font-size: 18px; font-weight: 600;">{{ product.selected_or_first_available_variant.price | money }}</p>
              <p class="price_product_filterPage compare" data-variantComparePrice style="font-size: 18px; font-weight: 600;">{{ product.selected_or_first_available_variant.compare_at_price | money }}</p>
            </div>
            <p class="p_stockLeft {% if product.selected_or_first_available_variant.inventory_quantity <= 2 %}red{% endif %}" data-text_green>{{ "product.word_left" | t }}
              <span data-variant_qnt data-text_green>{{ product.selected_or_first_available_variant.inventory_quantity }}</span>
            </p>
          </div>
        </div>
        <div class="swiper">
        </div>
        <div class="sliderControls" data-effect="zoom">
          <div class="container_productPage mini" style="flex-wrap: nowrap;">
            <div class="swiper-pagination" data-effect="zoom">
              <div class="swiper-pagination-bullet swiper-pagination-bullet-active"></div>
              <div class="swiper-pagination-bullet"></div>
              <div class="swiper-pagination-bullet"></div>
              <div class="swiper-pagination-bullet"></div>
            </div>
            <div class="slider_btns" data-effect="zoom">
              <div class="swiperBtn swiper-btn-prev" data-hover_grey data-scale data-cursor="pointer">
                <div class="line_arrow"></div>
                <div class="line_arrow reverse"></div>
              </div>
              <div class="swiperBtn reverse swiper-btn-next" data-hover_grey data-scale data-cursor="pointer">
                <div class="line_arrow"></div>
                <div class="line_arrow reverse"></div>
              </div>
              <div class="btn_Zoom" data-cursor="pointer" style="background-image: linear-gradient(rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.5)), url('{{ 'icon_magnify.svg' | asset_url }}');" data-zoom="2" data-hover_grey data-scale></div>
            </div>
            <div class="controls_Magnify" data-effect="zoom">
              <div class="btn_magnify active" data-zoom="2" data-btn_magnify data-cursor="pointer">2x</div>
              <div class="btn_magnify" data-zoom="3" data-btn_magnify data-cursor="pointer">3x</div>
              <div class="X_wrap zoom" data-zoom="1" data-hover_grey data-cursor="pointer">
                <div class="line_X"></div>
                <div class="line_X reverse"></div>
              </div>
            </div>
          </div>
        </div>

      </div>
    </div>
   
    <div class="formSIDE">
      <div class="formSideSUBWRAP">
        <!-- create form -->
        {% form 'product', product, class: 'form_productPage', data-alert: '' %}

          {% if product.available %}
            <input id="selectedProductINPUT" type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
            <!-- does the product variants like "size" or "color"? -->
            {% if product.variants.size > 1 %}
              <div class="productOptionWRAP">
                {% for option in product.options_with_values %}
                  {% if option.name == 'Size' %}
                    <label for="Size" data-color_06>{{ "product.word_chooseSize" | t }}</label>
                  {% elsif option.name == 'Color' %}
                    <label for="Color" data-color_06>{{ "product.word_chooseColor" | t }}</label>
                  {% endif %}

                  <!-- option values are defined in the product "variant" section on shopify-->
                   <!-- "Blue #E5E8FF #172556" / "S" -->
                  <fieldset class="optionWRAP {{ option.name }}" data-rawTextCOLOR data-bgCOLOR>
                    
                    {% for value in option.values %}

                      {% if option.name == 'Color' %}
                        {% assign ISvalueAvailable = false %}
                        {% for variant in product.variants %}
                          {% if variant.available and variant.option1 == value %}
                            {% assign ISvalueAvailable = true %}
                            {% break %}
                          {% endif %}
                        {% endfor %}
                        
                        <!-- PRINT COLOR OPTION IF AVAILABLE -->
                        {% if ISvalueAvailable %}
                        <div class="optionInputBtn">
                          <input class="optionRadio" type="radio" name="{{ option.name }}" value="{{ value }}" id="{{ option.name | handleize }}={{ value | handleize }}" {% if option.selected_value == value %}checked{% endif %}>
                          <div class="radioColorOVERLAY"></div>
                          <label class="radioLABEL color" data-visible="true" data-color="{{ value }}" for="{{ option.name | handleize }}={{ value | handleize }}"></label>
                        </div>
                            
                        {% endif %}

                      {% else %}
                        {% assign sizeVALUE = value %}
                        {% assign exists = false %}

                        {% for variant in product.variants %}
                          {% if variant.available and exists == false %}
                            {% for value in variant.options %}
                              {% if value == sizeVALUE %}
                                {% assign exists = true %}
                              {% endif %}
                            {% endfor %}
                          {% endif %}
                        {% endfor %}
     
                        <!-- PRINT SIZE OPTION IF AVAILABLE -->
                        {% if exists == true %}
                        <div class="optionInputBtn">
                          <input class="optionRadio" type="radio" data-cursor="pointer" name="{{ option.name }}" value="{{ value }}" id="{{ option.name | handleize }}={{ value | handleize }}" {% if option.selected_value == value %}checked{% endif %}>
                          <div class="radioColorOVERLAY"></div>
                          <label class="radioLABEL size" for="{{ option.name | handleize }}={{ value | handleize }}">{{ value }}</label>
                        </div>
                          
                        {% endif %}
                        
                      {% endif %}

                    {% endfor %}
                    
                  </fieldset>
                {% endfor %}
              </div>
            {% endif %}

            <label for="qantity" style="display: flex;" data-color_06>{{ "product.word_chooseQnt" | t }}
              <span class="" style="margin-left: auto" data-color_06 id="qnt_in_box">{{ "product.word_left" | t }}&nbsp;<span data-variant_qnt data-color_06>{{ product.selected_or_first_available_variant.inventory_quantity }}</span>
              </span>
            </label>

            <fieldset class="optionWRAP qnt" data-rawTextCOLOR data-bgCOLOR data-open="false" style="margin-bottom: 10px;">
              <input class="realQntINPUT" type="number" name="quantity" value="1" style="display: none">
              <div class="qntFRONT">
                <div class="qntBtnWRAP desk">
                  <div class="qntBTN qntDeskFRONT" data-selected="false" data-value="1" data-visible="true">1</div>
                  <div class="qntBTN qntDeskFRONT" data-selected="false" data-value="2" data-visible="true">2</div>
                  <div class="qntBTN qntDeskFRONT" data-selected="false" data-value="3" data-visible="true">3</div>
                  <div class="qntBTN qntDeskFRONT" data-selected="false" data-value="4" data-visible="true">4</div>
                  <div class="qntBTN qntDeskFRONT last" data-selected="false" data-value="5" data-visible="true">5</div>
                </div>
                <div class="qntBtnWRAP mob">
                  <div class="qntBTN qntMobFRONT" data-selected="false" data-value="1" data-visible="true">1</div>
                  <div class="qntBTN qntMobFRONT" data-selected="false" data-value="2" data-visible="true">2</div>
                  <div class="qntBTN qntMobFRONT last" data-selected="false" data-value="3" data-visible="true">3</div>
                </div>
                <div class="expandQntBTN">{{ "product.word_more" | t }}</div>
              </div>
              <div class="qntBACK">
                <div class="qntBackTopWRAP">
                  <input class="fakeQntInput" onkeydown="QNT.HANDLEfakeQntSubmit(event, this);" type="number" name="fake" placeholder="{{ "product.word_qntInput" | t }}" style="font-size: 17px">
                  <div class="qntActionBTN cancel" data-rawTextCOLOR>{{ "product.word_cancel" | t }}</div>
                  <div class="qntActionBTN submit" data-rawBgCOLOR data-visible="false">{{ "product.word_submit" | t }}</div>
                </div>
                <div class="qntBtnWRAP desk back">
                  <div class="qntBTN qntDeskBACK" data-selected="false" data-value="1" data-visible="true">1</div>
                  <div class="qntBTN qntDeskBACK" data-selected="false" data-value="2" data-visible="true">2</div>
                  <div class="qntBTN qntDeskBACK" data-selected="false" data-value="3" data-visible="true">3</div>
                  <div class="qntBTN qntDeskBACK" data-selected="false" data-value="4" data-visible="true">4</div>
                  <div class="qntBTN qntDeskBACK" data-selected="false" data-value="5" data-visible="true">5</div>
                  <div class="qntBTN qntDeskBACK" data-selected="false" data-value="6" data-visible="true">6</div>
                  <div class="qntBTN qntDeskBACK" data-selected="false" data-value="7" data-visible="true">7</div>
                  <div class="qntBTN qntDeskBACK" data-selected="false" data-value="8" data-visible="true">8</div>
                  <div class="qntBTN qntDeskBACK" data-selected="false" data-value="9" data-visible="true">9</div>
                  <div class="qntBTN qntDeskBACK" data-selected="false" data-value="10" data-visible="true">10</div>
                  <div class="qntBTN qntDeskBACK" data-selected="false" data-value="11" data-visible="true">11</div>
                  <div class="qntBTN qntDeskBACK last" data-selected="false" data-value="12" data-visible="true">12</div>
                </div>
                <div class="qntBtnWRAP mob back">
                  <div class="qntBTN qntMobBACK" data-selected="false" data-value="1" data-visible="true">1</div>
                  <div class="qntBTN qntMobBACK" data-selected="false" data-value="2" data-visible="true">2</div>
                  <div class="qntBTN qntMobBACK" data-selected="false" data-value="3" data-visible="true">3</div>
                  <div class="qntBTN qntMobBACK" data-selected="false" data-value="4" data-visible="true">4</div>
                  <div class="qntBTN qntMobBACK" data-selected="false" data-value="5" data-visible="true">5</div>
                  <div class="qntBTN qntMobBACK" data-selected="false" data-value="6" data-visible="true">6</div>
                  <div class="qntBTN qntMobBACK" data-selected="false" data-value="7" data-visible="true">7</div>
                  <div class="qntBTN qntMobBACK" data-selected="false" data-value="8" data-visible="true">8</div>
                  <div class="qntBTN qntMobBACK" data-selected="false" data-value="9" data-visible="true">9</div>
                  <div class="qntBTN qntMobBACK last" data-selected="false" data-value="10" data-visible="true">10</div>
                </div>
              </div>
              <p class="formALERT allAvailableVariantsInCART">{{ "alerts.alert_cartFull_pre" | t }} <span data-cart_qnt></span> {{ "alerts.alert_cartFull_post" | t }}</p>
              <!-- Sie haben bereits 3 Stück im Einkaufswagen-->
            </fieldset>

            <div class="alertWRAP">
              <p class="formALERT variantInCartERROR" data-color="red">{{ "alerts.red_qntCart_pre" | t }} <span data-variant_qnt></span> {{ "product.word_item" | t }} {{ "alerts.red_qntCart_mid" | t }} <span data-cart_qnt></span> {{ "product.word_item" | t }} {{ "alerts.red_qntCart_post" | t }} <span data-toChooseQNT></span> {{ "product.word_item" | t }}.</p>
              <!-- Es sind nur noch 4 Stück übrig, und Sie haben bereits 3 Stück in Ihrem Einkaufswagen. Wählen Sie gerne bis zu 1 Stück -->
              <p class="formALERT qntRequestERROR" data-color="red">{{ "alerts.red_qnt_pre" | t }} <span data-variant_qnt></span> {{ "product.word_item" | t }} {{ "alerts.red_qnt_post" | t }}</p>
              <!-- Es sind nur noch 4 Stück übrig -->
              <p class="formALERT variantInCART">{{ "alerts.alert_isCart_pre" | t }} (<span data-cart_qnt></span>). {{ "alerts.alert_isCart_post" | t }} <span data-toChooseQNT></span> {{ "product.word_item" | t }}</p>
              <!-- Diese Ware ist bereits in Ihrem Einkaufswagen (2 Stück). Wählen Sie gerne bis zu 3 Stück -->
            </div>
            <div class="wrap_formBtns" data-btnState="">
              <!-- form btns -->
              <div class="formBtn buy" style="background-color: {{ defaultRawColor }}; color: white;" data-rawBgCOLOR>
                {{ "product.btnWord_order_pre" | t }}&nbsp;<span data-chosen_qnt></span>&nbsp;{{ "product.word_item" | t }} {{ "product.btnWord_order_post" | t }}
                <span class="price_insideBtn" data-price_sum_calc>{{ product.selected_or_first_available_variant.price | money }}</span>
              </div>
              <div class="formBtn addCart main isCart" style="font-weight: 400;" data-rawBgCOLOR>
                <p style="color: white">{{ "product.btnWord_addMore_pre" | t }}&nbsp;<span data-chosen_qnt></span>&nbsp;{{ "product.btnWord_addMore_post" | t }}</p>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 337.94 421.48" style="width: 17px; margin: 0 0 2px auto;">
                  <g id="Ebene_2" data-name="Ebene 2">
                    <g id="Ebene_1-2" data-name="Ebene 1"><path style="fill: white" d="M337.69,385.58,301.08,86.79a10,10,0,0,0-9.88-8.74H46.73a10,10,0,0,0-9.88,8.74L.24,385.58A32,32,0,0,0,32,421.48H305.92A32,32,0,0,0,337.69,385.58ZM268.84,141.66c-.16,3.29-.48,6.53-.94,9.72-7.1,48.82-48.69,86.29-98.93,86.29S77.14,200.2,70,151.38c-.46-3.19-.78-6.43-.94-9.72v0a24.81,24.81,0,0,1,24.68-22.26q1.06,0,2.1.09A3.05,3.05,0,0,1,98.67,123a76.8,76.8,0,0,0,5.08,43.86C115,192.6,139.94,210.5,169,210.5s54-17.9,65.22-43.62a75.89,75.89,0,0,0,6.27-30.35,77,77,0,0,0-1.18-13.42,3.14,3.14,0,0,1,2.86-3.67c.66,0,1.34-.08,2-.08a24.81,24.81,0,0,1,24.68,22.26Z" /><path style="fill: white" d="M250.13,64H225.46a2.64,2.64,0,0,1-2.33-1.43c-11.27-21.74-31.31-36.2-54.16-36.2s-42.89,14.46-54.16,36.2A2.62,2.62,0,0,1,112.48,64H87.8a1.46,1.46,0,0,1-1.38-2C100.28,25.52,132,0,169,0s68.68,25.52,82.54,62A1.46,1.46,0,0,1,250.13,64Z" /></g>
                  </g>
                </svg>
              </div>
              <div class="formBtn addCart main noCart" style="font-weight: 400;" data-rawBgCOLOR>
                <p style="color: white">{{ "product.btnWord_add_pre" | t }}&nbsp;<span data-chosen_qnt></span>&nbsp;{{ "product.word_item" | t }} {{ "product.btnWord_add_post" | t }}</p>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 337.94 421.48" style="width: 17px; margin: 0 0 2px auto;">
                  <g id="Ebene_2" data-name="Ebene 2">
                    <g id="Ebene_1-2" data-name="Ebene 1"><path style="fill: white" d="M337.69,385.58,301.08,86.79a10,10,0,0,0-9.88-8.74H46.73a10,10,0,0,0-9.88,8.74L.24,385.58A32,32,0,0,0,32,421.48H305.92A32,32,0,0,0,337.69,385.58ZM268.84,141.66c-.16,3.29-.48,6.53-.94,9.72-7.1,48.82-48.69,86.29-98.93,86.29S77.14,200.2,70,151.38c-.46-3.19-.78-6.43-.94-9.72v0a24.81,24.81,0,0,1,24.68-22.26q1.06,0,2.1.09A3.05,3.05,0,0,1,98.67,123a76.8,76.8,0,0,0,5.08,43.86C115,192.6,139.94,210.5,169,210.5s54-17.9,65.22-43.62a75.89,75.89,0,0,0,6.27-30.35,77,77,0,0,0-1.18-13.42,3.14,3.14,0,0,1,2.86-3.67c.66,0,1.34-.08,2-.08a24.81,24.81,0,0,1,24.68,22.26Z" /><path style="fill: white" d="M250.13,64H225.46a2.64,2.64,0,0,1-2.33-1.43c-11.27-21.74-31.31-36.2-54.16-36.2s-42.89,14.46-54.16,36.2A2.62,2.62,0,0,1,112.48,64H87.8a1.46,1.46,0,0,1-1.38-2C100.28,25.52,132,0,169,0s68.68,25.52,82.54,62A1.46,1.46,0,0,1,250.13,64Z" /></g>
                  </g>
                </svg>
              </div>
              <div class="formBtn addCart second" style="border: 1px solid {{ defaultBgColor }}; font-weight: 400;" data-recolor_border_raw>
                <p data-rawTextCOLOR="">{{ "product.btnWord_add_pre" | t }}&nbsp;<span data-chosen_qnt></span>&nbsp;{{ "product.word_item" | t }} {{ "product.btnWord_add_post" | t }}</p>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 337.94 421.48" style="width: 17px; margin: 0 0 2px auto;">
                  <g id="Ebene_2" data-name="Ebene 2">
                    <g id="Ebene_1-2" data-name="Ebene 1"><path data-path_raw class="cartIcon_path" d="M337.69,385.58,301.08,86.79a10,10,0,0,0-9.88-8.74H46.73a10,10,0,0,0-9.88,8.74L.24,385.58A32,32,0,0,0,32,421.48H305.92A32,32,0,0,0,337.69,385.58ZM268.84,141.66c-.16,3.29-.48,6.53-.94,9.72-7.1,48.82-48.69,86.29-98.93,86.29S77.14,200.2,70,151.38c-.46-3.19-.78-6.43-.94-9.72v0a24.81,24.81,0,0,1,24.68-22.26q1.06,0,2.1.09A3.05,3.05,0,0,1,98.67,123a76.8,76.8,0,0,0,5.08,43.86C115,192.6,139.94,210.5,169,210.5s54-17.9,65.22-43.62a75.89,75.89,0,0,0,6.27-30.35,77,77,0,0,0-1.18-13.42,3.14,3.14,0,0,1,2.86-3.67c.66,0,1.34-.08,2-.08a24.81,24.81,0,0,1,24.68,22.26Z" /><path class="cartIcon_path" data-path_raw d="M250.13,64H225.46a2.64,2.64,0,0,1-2.33-1.43c-11.27-21.74-31.31-36.2-54.16-36.2s-42.89,14.46-54.16,36.2A2.62,2.62,0,0,1,112.48,64H87.8a1.46,1.46,0,0,1-1.38-2C100.28,25.52,132,0,169,0s68.68,25.52,82.54,62A1.46,1.46,0,0,1,250.13,64Z" /></g>
                  </g>
                </svg>
              </div>
          <a class="formBtn viewCart not_full" style="border: 1px solid {{ defaultBgColor }}; font-weight: 400;" href="{{ shop.url }}/{% unless lang == 'en' %}{{ lang }}/{% endunless %}cart" data-recolor_border_raw>
                <p style="color:{{ defaultRawColor }}" data-rawTextCOLOR>{{ "product.btnWord_viewBasket" | t }}</p>
              </a>
              <a class="formBtn viewCart full" style="background-color: {{ defaultRawColor }}; color: white;"href="{{ shop.url }}/{% unless lang == 'en' %}{{ lang }}/{% endunless %}cart" data-rawBgCOLOR>
                <p style="color: white; text-align: center">{{ "product.btnWord_viewBasket" | t }}</p>
              </a>

              <!---------------------------------------------------------------------------->

            </div>

          {% else %}
            <div class="sign_outOfstock">{{ "alerts.item_unavaiable" | t }}</div>
          {% endif %}
        {% endform %}

        <div class="separator"></div>
        
        <p style="margin: 16px 0; display: flex; align-items: center">
          <span><img src="{{ 'icon_truck.png' | asset_url }}" alt="Delivery truck icon" class="icon_otherInfo"></span>{{ "product.text_shippingDuration_pre" | t }} 2 {{ "product.text_shippingDuration_post" | t }}
        </p> 

        {% if product.metafields.reviews.rating.value | plus: 0 > 0  %}
        <!-- <p class="preview_reviews" data-hover_grey data-rawTextCOLOR><span class="shopify-product-reviews-badge" data-id="{{ product.id }}"></span>{{ product.metafields.reviews.rating_count | remove: '.0' }} {{ "product.word_outOfReviews" | t }}<span class="arrow_reviews"> 
            
          <svg style="height: 18px; object-fit: contain" viewBox="0 0 364 364" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path data-path_raw d="M182 0C131.826 0 91 40.8203 91 91C91 141.18 131.82 182 182 182C232.18 182 273 141.182 273 91C273 40.8182 232.176 0 182 0Z" fill="#0C0C0C"/>
          <path data-path_raw d="M349.691 303.406C333.36 271.93 304.14 246.018 266.988 230.065C229.836 214.113 187.04 209.104 145.862 215.887C104.685 222.67 67.6616 240.829 41.075 267.281C14.4884 293.733 -0.0240508 326.85 2.99198e-05 361.012V364H364V361.012C364.045 341.223 359.179 321.63 349.691 303.406Z" fill="#0C0C0C"/>
          </svg>

          </span>
        </p>
        -->
        {% endif %}

        <div class="wrap_productDescription" style="margin-bottom: 16px;">
          {{ product.metafields.custom.bullets | metafield_tag }}
          <p class="productDescription">
            {{ product.description }}</p>
        </div>
        
        <!--  <div class="separator"></div>
        
          <div id="shopify-product-reviews" data-id="{{product.id}}">{{ product.metafields.spr.reviews }}</div>
        <div class="separator"></div> 
        -->
        <div class="wrap_otherInfo" >
          <div class="otherInfo">
            <img src="{{ 'icon_truck.png' | asset_url }}" alt="Delivery truck icon" class="icon_otherInfo">
            <p>{{ "product.text_freeShipping" | t }}</p>
          </div>
          <div class="otherInfo">
            <img src="{{ 'icon_return.png' | asset_url }}" alt="Product refund icon" class="icon_otherInfo">
            <p>{{ "product.text_return" | t }}</p>
          </div>
          <div class="otherInfo">
            <img src="{{ 'icon_phone.png' | asset_url }}" alt="Telephone icon" class="icon_otherInfo">
            <p>{{ "product.text_contact" | t }}</p>
          </div>
        </div>
        <div class="wrap_payments">
          <img
            src="{{ 'icon_payment_visa.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_paypal.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_citadele.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_mastercard.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_klarna.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_applepay.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_amazon.svg' | asset_url }}"
            alt=""
            class="icon_payment">
          <img
            src="{{ 'icon_payment_googlepay.svg' | asset_url }}"
            alt=""
            class="icon_payment">
        </div>

      </div>
    </div>
  </div>
</section>

{% render 'inline_slider' %}



<script>

const product = {{ product | json }}
const format = "{{ shop.money_format }}"
const ISproductAvailable = {{ product.available }}
const cartITEMS = {{ cart.items | json }};
const variantQUANTITIES = [];

{% for variant in product.variants %}
  variantQUANTITIES.push({ varID: {{ variant.id }}, varQNT: {{ variant.inventory_quantity }}});
{% endfor %}; 

const GENERAL = (() => {
  function CHANGEurl(matchedVARIANT, bgCOLOR, rawCOLOR) {
    const url = new URLParse(window.location.href, true);
    url.query.variant = matchedVARIANT.id;
    url.query.color_bg = bgCOLOR;
    url.query.color_raw = rawCOLOR;
    window.history.replaceState(null, null, url.toString());
  }
  function DISPLAYflex(elementARRAY) {
    if (elementARRAY.length === 0) return;
    elementARRAY.forEach(x => x.style.display = "flex");
  }
  function DISPLAYblock(elements){
    elements.forEach(x => x.style.display = "block");
  }
  function TOGGLEdataVisibility(htmlELEMENT, visibility) {
    htmlELEMENT.setAttribute('data-visible', visibility);
  }
  function ISdesktop() {
    return window.innerWidth > 991 ? true : false;
  }
  function ISmobile() {
    return window.innerWidth < 501 ? true : false;
  }
  function GETselectedVariant() {
    // Find variant based on checked radios
    const checkedRADIOS = document.querySelectorAll('input[type="radio"].optionRadio:checked');
    const checkedRadioVALUES = [...checkedRADIOS].map(x => x.value);

    return _FINDmatchedVariant(checkedRadioVALUES);
  }
  function SELECTvariant(matchedVariant) {
    document.getElementById('selectedProductINPUT').value = matchedVariant.id;
  }
  function GETradioChangeInfos() {
    const selectedVARIANT = GETselectedVariant();
    const { ISitemInBag, variantBagQNT, variantStockQNT, toChooseQNT } = QNT.GETselVariantQntInfo()
    const { bgCOLOR, rawCOLOR } = COLOR.GETcolorToUse()
  
    return { selectedVARIANT, ISitemInBag, variantBagQNT, variantStockQNT, toChooseQNT, bgCOLOR, rawCOLOR }
  }
  function _FINDmatchedVariant(selectedRadioVALUES) {
    return product.variants.find(variant =>
      // "color" is the first product option, second is set to "size"
      selectedRadioVALUES.every(colorOPTION => variant.options.includes(colorOPTION))
    );
  }
  
  return { CHANGEurl, DISPLAYflex, DISPLAYblock, TOGGLEdataVisibility, ISdesktop, GETselectedVariant, SELECTvariant, GETradioChangeInfos, ISmobile }
})();
const COLOR = (() => {
  function color() {
    const { rawCOLOR, bgCOLOR } = GETcolorToUse()
    const rawELEMENTS = document.querySelectorAll('[data-rawBgCOLOR]');
    const bgELEMENTS = document.querySelectorAll('[data-bgCOLOR]');
    const rawTEXTS = document.querySelectorAll('[data-rawTextCOLOR]');
    const rawBORDERS = document.querySelectorAll('[data-recolor_border_raw]');
    const rawPATHS = document.querySelectorAll('[data-path_raw]');
    rawTEXTS.forEach(el => el.style.color = rawCOLOR);
    rawELEMENTS.forEach(el => el.style.backgroundColor = rawCOLOR);
    bgELEMENTS.forEach(el => el.style.backgroundColor = bgCOLOR);
    rawBORDERS.forEach(el => el.style.borderColor = rawCOLOR);
    rawPATHS.forEach(path => path.style.fill = rawCOLOR);

  }
  function COLORswiper() {
    const { rawCOLOR, bgCOLOR } = GETcolorToUse()
    const swiperBULLETS = document.querySelectorAll('.swiper-pagination-bullet');
    const magnifyBTNS = document.querySelectorAll('[data-btn_magnify]');
    const activeBULLET = document.querySelector('.swiper-pagination-bullet-active');
    const activeMagnifyBTN = document.querySelector('[data-btn_magnify].active');

    swiperBULLETS.forEach(y => y.style.backgroundColor = bgCOLOR)
    magnifyBTNS.forEach(y => y.style.backgroundColor = bgCOLOR)
    activeBULLET.style.backgroundColor = rawCOLOR
    activeMagnifyBTN.style.backgroundColor = rawCOLOR

}
  function GETcolorToUse(){
    {% if product.options contains 'Color' %}
      const checkedColorRADIO = document.querySelector('.optionRadio[name="Color"]:checked')
      const [ , bgCOLOR, rawCOLOR ] = checkedColorRADIO.value.split(" ");
      return { bgCOLOR, rawCOLOR }
    {% endif %};
    return { bgCOLOR: '{{ defaultBgColor }}', rawCOLOR: '{{ defaultRawColor }}'}

  }
  function COLORradioColorDots() {
    const radioDOTS = document.querySelectorAll('.radioLABEL.color');
    if (!radioDOTS) return;

    radioDOTS.forEach(radio => {
      const [, , rawCOLOR] = radio.dataset.color.split(" ");
      radio.style.backgroundColor = rawCOLOR;
    });
  
  }  
  
  return { GETcolorToUse, color, COLORswiper, COLORradioColorDots }
})();
const RADIOS = (() => {
  function ADJUSTsizeRadios() {

    // this function adjusts the "size" html radios whenever a new color is chosen
    {% if product.options contains 'Color' and product.options contains 'Size'%}

      const allVARIANTS = _COLLECTallProductVariants() 
      const colorMatchingVARIANTS = _FILTERvariantsByColor(allVARIANTS, COLOR.GETcolorToUse().bgCOLOR)
      const sizeRADIOS = document.querySelectorAll('.optionRadio[name="Size"]');
      let selectedRADIO = undefined;
      let availableRadioLIST = []

      // hide/shrink sizeRADIO if the currently selected color
      // of the product does not come in that size
      sizeRADIOS.forEach(radio => {
        const radioPARENT = radio.parentElement
        const ISsizeAvailable = _ISsizeInVariantList(colorMatchingVARIANTS, radio.value)
        GENERAL.TOGGLEdataVisibility(radioPARENT, ISsizeAvailable)
        if (ISsizeAvailable) { availableRadioLIST.push(radio) }
        if (radio.checked && ISsizeAvailable) { selectedRADIO = radio }
      })

      // if the currently selected color does not include the
      // currently selected size, SELECT the first available size/sizeRADIO
      // ==> this restarts the fucntions attached to the radios (SETradioListeners)
      if (!selectedRADIO) {
          availableRadioLIST[0].checked = true;
          availableRadioLIST[0].dispatchEvent(new Event('change'));
      } 
      
    {% endif %}
    }
  function _COLLECTallProductVariants() {
    const allVARIANTS = [ /* {bgCOLOR: 'Blau #E5E8FF #172556', size: 'L'} */ ]
    {% for variant in product.variants %}
      {% if variant.inventory_quantity != 0 %}
        allVARIANTS.push({bgCOLOR: '{{ variant.option1 }}', size:'{{ variant.option2 }}'});
      {% endif %}
    {% endfor %}
    return allVARIANTS
  }
  function _FILTERvariantsByColor(objLIST, color) {
    // {bgCOLOR: 'Blau #E5E8FF #172556', size: 'L'}
    return objLIST.filter(variant => variant.bgCOLOR.includes(color));

  }
  function _ISsizeInVariantList(variantLIST, size) {
    //--> [ {bgCOLOR: 'Blau #E5E8FF #172556', size: 'L'} ]
    return variantLIST.some(variant => variant.size === size);

  }
  
  return { ADJUSTsizeRadios }
})();
const ZOOM = (() => {
  function SETdesktopImgDrag() {
      let slides_new = document.querySelectorAll('.swiper-slide');
      slides_new.forEach(slide => {   // desktop zoom move
          let isDragging = false;
          let startX, startY, scrollLeft, scrollTop;  
          slide.addEventListener('mousedown', e => {
              const swiperWrapper = document.querySelector('.swiper-wrapper')
              if (swiperWrapper.dataset.magnify == '1') return;
              isDragging = true;
              startX = e.pageX - slide.offsetLeft;
              startY = e.pageY - slide.offsetTop;
              scrollLeft = slide.scrollLeft;
              scrollTop = slide.scrollTop;
          });
          slide.addEventListener('mouseleave', () => {isDragging = false});
          slide.addEventListener('mouseup', () => {isDragging = false});
          slide.addEventListener('mousemove', e => {
              if (!isDragging) return;
              e.preventDefault();
              const x = e.pageX - slide.offsetLeft;
              const y = e.pageY - slide.offsetTop;
              const walkX = (x - startX) * 3;
              const walkY = (y - startY) * 5;
              slide.scrollLeft = scrollLeft - walkX;
              slide.scrollTop = scrollTop - walkY;
          });
      });
  }
  function TOGGLEzoom(magnify) {
      document.querySelector('.swiper-wrapper').dataset.magnify = magnify
      const wrap_Controls = document.querySelector('.controls_magnify')

      if (magnify == 1) { // return to normal
        wrap_Controls.classList.remove('zoom') // remove controls earlier
        _GROWimage(1);
        setTimeout(() => {_HANDLEzoomElements(false)}, 400)
        setTimeout(() => {_ADJUSTzoomBtnColors(magnify), COLOR.COLORswiper()}, 600);
        return;
      }
      _HANDLEzoomElements(true);
      _GROWimage(magnify);
      _ADJUSTzoomBtnColors(magnify);
      COLOR.COLORswiper();
  }
  function _HANDLEzoomElements(value) {
    const zoomELEMENTS = document.querySelectorAll('[data-effect="zoom"]');
    const productWAVE = document.querySelector('.img_WAVE_long');
    const activeSlide = document.querySelector('.swiper-slide-active');
    zoomELEMENTS.forEach(x => value ? x.classList.add('zoom') : x.classList.remove('zoom'))
    activeSlide.style.overflow = value ? 'scroll' : 'visible';
    productWAVE.style.opacity = value ? '0%' : '100%';
    _ADJUSTslides(value)
  }
  function _GROWimage(magnify) {
    const img = document.querySelector('.swiper-slide-active').firstElementChild;
    const { naturalWidth: w, naturalHeight: h } = img;

    if (magnify == 1) {
      img.parentElement.scrollTo({top:0, left:0, behavior:'smooth'});
      img.style.height = "100%";
      img.style.width = "100%"; 
      return;
    }

    if (GENERAL.ISdesktop()) {
      let targetHeight = window.innerHeight * (magnify - 0.8);
      const w_Value = w / h * targetHeight;
      img.style.width = w_Value + "px"
      img.style.height = targetHeight + "px";
      return; 
    }

    const targetWidth = window.innerWidth * magnify;
    const h_Value = h / w * targetWidth;
    img.style.width = targetWidth + "px";
    img.style.height = h_Value + "px";
  }
  function _ADJUSTslides(value){
    const slides = document.querySelectorAll('.swiper-slide')
    slides.forEach(slide => {
      if (value) {
        slide.classList.add('slider-no-swiping');
        if (!slide.classList.contains('swiper-slide-active')) {slide.firstElementChild.style.opacity = '0%'};
        return;
      }
      slide.classList.remove('slider-no-swiping');
      slide.firstElementChild.style.opacity = '100%'
    })
  }
  function _ADJUSTzoomBtnColors(magnify) {
    const btns = document.querySelectorAll('[data-btn_magnify]')
    btns.forEach(x => {
      if (magnify == 1 && x.dataset.zoom == 2){x.classList.add('active')}
      else if (x.dataset.zoom == magnify) {x.classList.add('active')}
      else {x.classList.remove('active')}  
    })
  }
  
  return { SETdesktopImgDrag, TOGGLEzoom }
})();
const IMG = (() => {

  const productIMAGES = _CREATEproductImages()

  function GETproductImages() {
    return productIMAGES
  }

  function _CREATEproductImages() {
    const imageELEMENTS = [];
    let imgInfoLIST = [];
  
    // get ulr + alt from all images
    {% for image in product.images %}
      imgInfoLIST.push({src: '{{ image | img_url: '1200x1200' | prepend: 'https:'}}', alt: '{{ image.alt }}' })
    {% endfor %};
    // img_url: 'master'  ==> original size
    
    // create and push the img into imageELEMENTS
    for (let imgNR = 0; imgNR < imgInfoLIST.length; imgNR++) {
      imageELEMENTS.push(_CREATEimage(imgInfoLIST[imgNR]))
    }
  
    return imageELEMENTS
  }
  function _CREATEimage({src, alt}) {
    // {src: "https://...", alt: ", Rose #F5DEF3 #981287"}
    const elementIMG = document.createElement('img');
    elementIMG.setAttribute('src', `${src}`);
    elementIMG.setAttribute('alt', `${alt}`);
    return elementIMG
  }
  
  return { GETproductImages }
})();  
const SWIPER = (() => {
  let swiper
  function SETimgSwiper() {
    _APPENDswiper(IMG.GETproductImages())
    _ACTIVATEswiper(); // CAUSES ERRORs
    _RESETtransitions();
    SETparallax()
  }
  function SETparallax() {
    if (GENERAL.ISdesktop()) {
      document.querySelector('.img_WAVE_long').setAttribute('data-swiper-parallax', '-20%')
    } else {
      document.querySelector('.img_WAVE_long').setAttribute('data-swiper-parallax', '-13%');
    }
  } 
  function HANDLEswiperReincertion() {
    document.querySelector('.swiper').style.opacity = "0%"
    document.querySelector('.sliderControls').style.opacity = "0%"
    setTimeout(() => {
      _APPENDswiper(IMG.GETproductImages())
      swiper.destroy();
      _ACTIVATEswiper()
      SETparallax()
      document.querySelector('.sliderControls').style.opacity = "100%"
    }, 201)
  }
  
  function _CREATEwave(src, bgCOLOR){
    const wave = document.createElement('img');
    wave.classList.add('img_WAVE_long');
    wave.setAttribute('src', src);
    wave.setAttribute('style', `background-color: ${bgCOLOR}`);
    wave.setAttribute('data-swiper-parallax', "-13%");
    wave.setAttribute('data-recolor_bg', ``);
    wave.setAttribute('alt', `Colorful wave`);
    return wave;
  }
  function _CREATEswiper(){
    const newSWIPER = document.createElement('div');
    newSWIPER.classList.add('swiper');
    newSWIPER.setAttribute('style', "opacity: 0%");
    return newSWIPER;
  }
  function _CREATEswiperWrapper(){
    const swiperWRAPPER = document.createElement('div');
    swiperWRAPPER.classList.add('swiper-wrapper');
    swiperWRAPPER.setAttribute('data-effect', "zoom");
    swiperWRAPPER.setAttribute('data-zoom_active', "false");
    swiperWRAPPER.setAttribute('data-reset', "");
    swiperWRAPPER.setAttribute('data-magnify', "1");
    return swiperWRAPPER;
  }
  function _CREATEswiperSlide(img){
    const swiperSLIDE = document.createElement('div');
    swiperSLIDE.classList.add('swiper-slide');
    img.classList.add('imgSwiper');
    img.setAttribute('draggable', 'false');
    img.setAttribute('alt', '{{ product.title }}' + img.getAttribute('alt'));
    swiperSLIDE.append(img);

    return swiperSLIDE;
  }
  
  function _APPENDswiper(unfilteredIMAGES) {
    const colorHex_bg = new URLSearchParams(window.location.search).get('color_bg');
    if (!colorHex_bg) { console.log('Load default color'); return;}

    const stickyDIV = document.querySelector('.stickyDIV');
    const oldSWIPER = stickyDIV.querySelector('.swiper');
    const filteredIMAGES = _FILTERimagesByColor(unfilteredIMAGES, colorHex_bg);
    const newSWIPER = _CREATEswiper();
    const swiperWRAPPER = _CREATEswiperWrapper();
    const sliderCONTROLS = document.querySelector('.sliderControls');;
    const wave = _CREATEwave("{{ 'img_WAVE_filterPage.svg' | asset_url }}", colorHex_bg);

    _APPENDswiperSlides(swiperWRAPPER, filteredIMAGES);
    stickyDIV.removeChild(sliderCONTROLS);
    stickyDIV.append(sliderCONTROLS);

    newSWIPER.append(wave);
    newSWIPER.append(swiperWRAPPER);
    stickyDIV.removeChild(oldSWIPER);
    stickyDIV.append(newSWIPER);

    setTimeout(() => {
      newSWIPER.removeAttribute('style')
    }, 30)
  }
  function _APPENDswiperSlides(targetWRAPPER, imgLIST){
    imgLIST.forEach(img => {
      const slide = _CREATEswiperSlide(img);
      targetWRAPPER.append(slide);
    });
  }
  function _ACTIVATEswiper() {
    swiper = new Swiper(".swiper", {
      parallax: true,
      grabCursor: true,
      noSwipingClass: 'slider-no-swiping',
      pagination: {
        el: ".swiper-pagination",
        clickable: true
      },
      navigation: {
        nextEl: ".swiper-btn-next",
        prevEl: ".swiper-btn-prev"
      }
    });
    swiper.on('transitionEnd', function() {
      _RESETtransitions();
    });
    swiper.on('slideChange', function() {
      COLOR.COLORswiper();
    });
  }
  function _RESETtransitions() {
    document.querySelectorAll('[data-reset]').forEach(x => {
      x.style.transitionDuration = "400ms";
    });
    document.querySelector('.img_WAVE_long').style.transition = "400ms";
  }
  function _FILTERimagesByColor(unfilteredIMAGES, color){
    const filteredIMAGES = unfilteredIMAGES.filter(img => {
      return img.getAttribute('alt').includes(color);
    })
    return filteredIMAGES;
  }
  
  return { SETimgSwiper, SETparallax, HANDLEswiperReincertion}
})();
const CART = (() => {
  function IScartEmpty() {
    {% if cart.item_count == 0 %} return true ;{% endif %}
    return false
  };
  function FINDvariantInBag(variantID) {
    return cartITEMS.find(x => x.id == variantID);
  }

  return { IScartEmpty, FINDvariantInBag }
})();
const FORM = (() => {
  function HANDLEformBtns(ISitemInCart, error) {
    const fromBTNS = document.querySelectorAll('.formBtn')
    fromBTNS.forEach(x => x.style.display = "none")

    const buyBTN = document.querySelector('.formBtn.buy')
    const mainEmptyAtcBTN = document.querySelector('.formBtn.addCart.main.noCart')
    const mainNotEmptAtcBTN = document.querySelector('.formBtn.addCart.main.isCart')
    const secondaryAtcBTN = document.querySelector('.formBtn.addCart.second')
    const viewCartFullBTN = document.querySelector('.formBtn.viewCart.full')
    const viewCartNotFullBTN = document.querySelector('.formBtn.viewCart.not_full')
  
    if (CART.IScartEmpty()) {
      GENERAL.DISPLAYflex([buyBTN, secondaryAtcBTN])
      return;
    }
    if (!ISitemInCart) {
      GENERAL.DISPLAYflex([mainEmptyAtcBTN])
      return;
    }
    if (ISitemInCart && error == "cart_full") {
      GENERAL.DISPLAYflex([viewCartFullBTN])
      return;
    }
    GENERAL.DISPLAYflex([mainNotEmptAtcBTN, viewCartNotFullBTN])
  }
  function EDITformAlerts(ISitemInCart, error) {
    const textALERTS = document.querySelectorAll('.textAlert')
    textALERTS.forEach(x => x.style.display = "none")

    const cartFullALERT = document.querySelector('.textAlert.cart_full')
    const itemIsInCartALERT = document.querySelector('.textAlert.isCart')

    if (ISitemInCart && error == 'none') {
      GENERAL.DISPLAYblock([itemIsInCartALERT]);
      return;
    }
    if (error == 'cart_full') {
      GENERAL.DISPLAYflex([cartFullALERT])
    }
  }
 
  return { HANDLEformBtns, EDITformAlerts}
})();
const QNT = (() => {
  let ISqntBtnToggleLocked = false;
  let selectedQNT = ISproductAvailable ? 1 : NaN;

  function SELECTqnt(selQNT) {
    if (selQNT === 0) return;
    _RESETallQntBtns()
    _HANLDEactiveQntBtn('qntDeskFRONT', 5, selQNT)
    _HANLDEactiveQntBtn('qntMobFRONT', 3, selQNT)
    _HANLDEactiveQntBtn('qntDeskBACK', 12, selQNT)
    _HANLDEactiveQntBtn('qntMobBACK', 10, selQNT)
    _EDITqntInput(selQNT)
    selectedQNT = selQNT;
  }
  function GETselVariantQntInfo() {
    const loadedVARIANT = GENERAL.GETselectedVariant()
    const variantID = loadedVARIANT.id

    const inBagVARIANT = CART.FINDvariantInBag(variantID);
    const ISitemInBag = inBagVARIANT ?? false;
    const variantBagQNT = inBagVARIANT ? inBagVARIANT.quantity : 0;

    const variantStockQNT = variantQUANTITIES.find(variantX => variantX.varID === variantID).varQNT;
    const toChooseQNT = variantStockQNT - variantBagQNT;
    
    return { ISitemInBag, variantBagQNT, variantStockQNT, toChooseQNT }
  }
  function GETselQNT() {
    return selectedQNT
  }
  
  function HANDLEnewVariantQntReselection(variantStockQNT, variantBagQNT, ISitemInBag, toChooseQNT) {
    // downselect qnt in case the newly selceted variant
    // has less items available then there are currently selected

    let selQNT = GETselQNT();
    let NEWtoChooseQNT = toChooseQNT;

    if (GETselQNT() > toChooseQNT) {
      selQNT = toChooseQNT;
      NEWtoChooseQNT = toChooseQNT;
      SELECTqnt(toChooseQNT)
    }

    _DISPLAYqntBtns(NEWtoChooseQNT);
    _EDITqntTexts(selQNT, variantStockQNT, variantBagQNT, NEWtoChooseQNT);
    _DISPLAYsubmitBtns(selQNT, variantStockQNT, variantBagQNT, ISitemInBag);
    _DISPLAYqntAlerts(selQNT, variantStockQNT, variantBagQNT, ISitemInBag, NEWtoChooseQNT);
    _HANLDEallVariantItemsInCart(variantStockQNT, variantBagQNT)
    TOGGLEexpandQntBtn(NEWtoChooseQNT)
  }
  function HANDLEfakeQntSubmit(event, fakeINPUT) {
    // this fucntion is called in the html
    // it's to detect an enter, or a "Go" on mobile submit
    if (event.key === "Enter" || event.keyCode === 13 || event === "Enter") {
      const fakeInputVALUE = parseInt(fakeINPUT.value)
      const { variantStockQNT, variantBagQNT, toChooseQNT } = GETselVariantQntInfo();

      const ALLOWsubmit = _ALLOWfakeQntSubmit(fakeInputVALUE, toChooseQNT)
      if (!ALLOWsubmit) return;

      SELECTqnt(fakeInputVALUE)
      _RESETqntInputs()
      const { toChooseQNT: NEWtoChooseQNT } = GETselVariantQntInfo();
      _EDITqntTexts(fakeInputVALUE, variantStockQNT, variantBagQNT, NEWtoChooseQNT)
    }
  }
  function HANDLEfakeQntInputTyping(fakeINPUT){
    const { toChooseQNT, variantStockQNT, variantBagQNT, ISitemInBag } = QNT.GETselVariantQntInfo();
    const fakeInputVALUE = parseInt(fakeINPUT.value)

    const ALLOWsubmit = _ALLOWfakeQntSubmit(fakeInputVALUE, toChooseQNT)
    TOGGLEqntSubmitBtn(ALLOWsubmit)
    _DISPLAYqntAlerts(fakeInputVALUE, variantStockQNT, variantBagQNT, ISitemInBag, toChooseQNT)

    if (!ALLOWsubmit) {
      fakeINPUT.select();
      fakeINPUT.focus();
      return;
    }
  }
  function HANDLEqntBtnSelection(selQNT) {
    const { toChooseQNT, variantStockQNT, variantBagQNT, ISitemInBag } = GETselVariantQntInfo();

    const ALLOWsubmit = _ALLOWfakeQntSubmit(selQNT, toChooseQNT)
    _DISPLAYqntAlerts(selQNT, variantStockQNT, variantBagQNT, ISitemInBag, toChooseQNT)
    if (!ALLOWsubmit) return;

    SELECTqnt(selQNT)
    _RESETqntInputs()
    _EDITqntTexts(selQNT, variantStockQNT, variantBagQNT, toChooseQNT)
  }

  function TOGGLEqntSubmitBtn(IStrue) {
      const qntSubmitBTN = document.querySelector('.qntActionBTN.submit')
      qntSubmitBTN.setAttribute("data-visible", `${IStrue}`) 
  }
  function TOGGLEqntInput(SHOULDopen) {
    const qntWRAP = document.querySelector('.optionWRAP.qnt')
    const qntFRONT = document.querySelector('.qntFRONT')
    const qntBACK = document.querySelector('.qntBACK')
    let ISopen = (qntWRAP.dataset.open == "true")

    if (SHOULDopen && !ISopen) {
      _OPENqntBtnBox(qntWRAP, qntFRONT, qntBACK)
      return;
    } 
    _CLOSEqntBtnBox(qntWRAP, qntFRONT, qntBACK)
  }
  function TOGGLEexpandQntBtn(availQNT) {
    const expandQntBTN = document.querySelector('.expandQntBTN')
    const _ISmobile = GENERAL.ISmobile();

    let SHOULDshow = false;
    if ((!_ISmobile && (availQNT > 5)) || (_ISmobile && (availQNT > 3))) {
      SHOULDshow = true;
    }
    expandQntBTN.setAttribute('data-visible', `${SHOULDshow}`)
  }
  function FIXqntChoice(toChooseQNT, isCart, error, reqQNT) {
    if (!toChooseQNT){
      FORM.EDITformAlerts(isCart, error)
      FORM.HANDLEformBtns(isCart, error)  
      return
    }

    const selQNT = document.querySelector('.qntInput').value
    const texts_chosen_qnt = document.querySelectorAll('[data-chosen_qnt]')
    const price_inside_btn = document.querySelector('[data-price_sum_calc]')
    
    if (selQNT > toChooseQNT) {

      _EDITqntInput(toChooseQNT)
      FORM.EDITformAlerts(isCart, 'none')
      FORM.HANDLEformBtns(isCart, 'none') 
      texts_chosen_qnt.forEach(x => x.textContent = toChooseQNT)
      price_inside_btn.textContent = formatMoney(GENERAL.GETselectedVariant().price * toChooseQNT, format)
    }
  }
  
  function _EDITqntTexts(selQNT, variantStockQNT, variantBagQNT, toChooseQNT) { 

    const selectedVARIANT = GENERAL.GETselectedVariant()
    const variantPRICE = selectedVARIANT.price;
    const variantComparePRICE = selectedVARIANT.compare_at_price;

    document.querySelectorAll('[data-cart_qnt]').forEach(x => x.textContent = variantBagQNT)
    document.querySelectorAll('[data-chosen_qnt]').forEach(x => x.textContent = selQNT)
    document.querySelectorAll('[data-variant_qnt]').forEach(x => x.textContent = variantStockQNT);
    document.querySelectorAll('[data-toChooseQNT]').forEach(x => x.textContent = toChooseQNT);
    document.querySelectorAll('[data-variantPrice]').forEach(x => x.textContent = formatMoney(variantPRICE, format));
    document.querySelectorAll('[data-variantComparePrice]').forEach(x => x.textContent = variantComparePRICE ? formatMoney(variantComparePRICE, format) : '');

    const totalSUM = document.querySelector('[data-price_sum_calc]')
    totalSUM.textContent = formatMoney(variantPRICE * selQNT, format)

    const p_stockLeft = document.querySelector('.p_stockLeft')
    variantStockQNT <= 2 ?  p_stockLeft.classList.add('red') : p_stockLeft.classList.remove('red')
  }
  function _EDITqntInput(selQNT) {
    const qntINPUT = document.querySelector('.realQntINPUT')
    qntINPUT.value = selQNT;
    qntINPUT.setAttribute('value', `${selQNT}`);

  }
  function _RESETqntInputs() {
    const fakeQntINPUT = document.querySelector('.fakeQntInput');
    fakeQntINPUT.value = '';
    TOGGLEqntSubmitBtn(false)
    TOGGLEqntInput(false)
  }
  function _RESETallQntBtns() {
    const qntBTNS = document.querySelectorAll('.qntBTN')
    qntBTNS.forEach(btn => {
      btn.setAttribute('data-selected', 'false')
    })

    const lastDeskFrontBTN = document.querySelector('.qntBTN.qntDeskFRONT.last');
    const lastMobFrontBTN = document.querySelector('.qntBTN.qntMobFRONT.last')
    const lastDeskBackBTN = document.querySelector('.qntBTN.qntDeskBACK.last')
    const lastMobBackBTN = document.querySelector('.qntBTN.qntMobBACK.last')

    lastDeskFrontBTN.setAttribute('data-value', '5');
    lastMobFrontBTN.setAttribute('data-value', '3');
    lastDeskBackBTN.setAttribute('data-value', '12');
    lastMobBackBTN.setAttribute('data-value', '10');

    lastDeskFrontBTN.textContent = '5';
    lastMobFrontBTN.textContent = '3';
    lastDeskBackBTN.textContent = '12';
    lastMobBackBTN.textContent = '10';
  }
  function _DISPLAYqntBtns(toChooseQNT) { 
      if (!toChooseQNT) return;
      const qntBTNS = document.querySelectorAll('.qntBTN')
      qntBTNS.forEach(btn => {
        const btnVALUE = btn.dataset.value
        if (btnVALUE > toChooseQNT) {
          btn.setAttribute('data-visible', 'false')
          return;
        } 
        btn.setAttribute('data-visible', 'true')
      })
  }
  function _DISPLAYsubmitBtns(selQNT, variantStockQNT, variantBagQNT, ISitemInBag) {
    const fromBtnWRAP = document.querySelector('.wrap_formBtns')
    let state = _GETformBtnState(selQNT, variantStockQNT, variantBagQNT, ISitemInBag);
    fromBtnWRAP.setAttribute('data-btnState', state)
  }
  function _DISPLAYqntAlerts(selQNT, variantStockQNT, variantBagQNT, ISitemInBag, toChooseQNT) {
    const form = document.querySelector('.form_productPage')
    const alert = _GETqntAlert(selQNT, variantStockQNT, variantBagQNT, ISitemInBag, toChooseQNT)
    form.setAttribute('data-alert', `${alert}`)
  }
  function _GETformBtnState(selQNT, variantStockQNT, variantBagQNT, ISitemInBag){
    const shoppingCartSIZE = cartITEMS.length
    const IScartEmpty = (shoppingCartSIZE === 0)

    if (!IScartEmpty && ISitemInBag && (variantBagQNT === variantStockQNT)) {
      return "itemInCartFULL";
    }
    if (!IScartEmpty && ISitemInBag) {
      return "itemInCART"
    }
    if (!IScartEmpty && !ISitemInBag) {
      return "cartNotEmpty"
    }
    return "cartEMPTY"
  }
  function _GETqntAlert (selQNT, variantStockQNT, variantBagQNT, ISitemInBag, toChooseQNT){
    if (ISitemInBag && (variantBagQNT === variantStockQNT)) {
      return "allAvailableVariantsInCART";
    }
    if (ISitemInBag && (selQNT > toChooseQNT)) {
      return "variantInCartERROR"
    }
    if (ISitemInBag) {
      return "variantInCART"
    }
    if (!ISitemInBag && (selQNT > toChooseQNT)) {
      return 'qntRequestERROR'
    }
    return ''
  }
  
  function _ALLOWfakeQntSubmit(fakeInputVALUE, toChooseQNT) {
    return (fakeInputVALUE !== NaN && (fakeInputVALUE !== 0) && (fakeInputVALUE <= toChooseQNT))
  }
  function _HANLDEactiveQntBtn(subclass, threshold, selQNT){
    if (selQNT === 0) return;
    if (selQNT > threshold) {
      const lastBTN = document.querySelector(`.qntBTN.${subclass}.last`)
      lastBTN.setAttribute('data-selected', 'true');
      lastBTN.setAttribute('data-value', `${selQNT}`);
      lastBTN.textContent = selQNT;
      return;
    }
    const targetBTN = document.querySelector(`.qntBTN.${subclass}[data-value="${selQNT}"]`)
    targetBTN.setAttribute('data-selected', 'true');

  }
  function _HANLDEallVariantItemsInCart(variantStockQNT, variantBagQNT){
    if ((variantStockQNT === variantBagQNT) || (variantBagQNT > variantStockQNT)) {
      const qntFRONT = document.querySelector('.qntFRONT')
      const qntBACK = document.querySelector('.qntBACK')
      const alert = document.querySelector('.formALERT.allAvailableVariantsInCART')

      
    }
  }
  function _OPENqntBtnBox(qntWRAP, qntFRONT, qntBACK) {
    ISqntBtnToggleLocked = true
    qntWRAP.dataset.open = 'true'
    
    qntFRONT.style.opacity = '0%'
    qntBACK.style.display = 'flex'
    _RESIZEelement('.optionWRAP.qnt', qntBACK.getBoundingClientRect().height)

    setTimeout(() => {
      qntFRONT.style.display = 'none';
      qntBACK.style.opacity = '100%'
    }, 60)
    
    setTimeout(() => {
      ISqntBtnToggleLocked = false
    }, 160)
    
  }
  function _CLOSEqntBtnBox(qntWRAP, qntFRONT, qntBACK) {
    ISqntBtnToggleLocked = true
    qntWRAP.dataset.open = 'false'
    
    qntBACK.style.opacity = '0%'
    qntFRONT.style.display = 'flex'
    _RESIZEelement('.optionWRAP.qnt', 54)

    setTimeout(() => {
      qntBACK.style.display = 'none';
      qntFRONT.style.opacity = '100%'
    }, 60)
    
    setTimeout(() => {
      ISqntBtnToggleLocked = false
    }, 160)
  }
  function _RESIZEelement(elementCLASS, height) {
    const element = document.querySelector(elementCLASS)
    element.style.height = height + 'px'
  }

  return { TOGGLEexpandQntBtn, HANDLEqntBtnSelection, HANDLEfakeQntSubmit, HANDLEfakeQntInputTyping, TOGGLEqntInput, TOGGLEqntSubmitBtn, _DISPLAYqntBtns, FIXqntChoice, GETselVariantQntInfo, _EDITqntTexts, SELECTqnt, GETselQNT, HANDLEnewVariantQntReselection}
})();
const EVENTS = (() => {
  function INITIALIZE(){
    QNT.SELECTqnt(1)
    const loadedVARIANT = GENERAL.GETselectedVariant()
    const { ISitemInBag, variantBagQNT, variantStockQNT, toChooseQNT } = QNT.GETselVariantQntInfo()
    const { bgCOLOR, rawCOLOR } = COLOR.GETcolorToUse()

    GENERAL.CHANGEurl(loadedVARIANT, bgCOLOR, rawCOLOR)
    QNT.HANDLEnewVariantQntReselection(variantStockQNT, variantBagQNT, ISitemInBag, toChooseQNT)
    SWIPER.SETimgSwiper()
    COLOR.color()
    COLOR.COLORswiper()
    setTimeout(() => { ZOOM.SETdesktopImgDrag() }, 300)
    document.querySelector('nav').setAttribute('data-shadow_threshold', '-1')
  }
  function INITIALIZEunavailableProduct() {
    COLOR.color();
    SWIPER.SETimgSwiper()
    setTimeout(() => {
      COLOR.COLORswiper()
    }, 20);

  }
  
  function SETqntListeners() {
    const qntBTNS = document.querySelectorAll('.qntBTN')
    const expandQntBTN = document.querySelectorAll('.expandQntBTN')
    const cancelQntBTN = document.querySelector('.qntActionBTN.cancel')
    const fakeQntINPUT = document.querySelector('.fakeQntInput')
    const fakeQntSubmitBTN = document.querySelector('.qntActionBTN.submit')
    const { variantBagQNT, variantStockQNT, toChooseQNT } = QNT.GETselVariantQntInfo()

    qntBTNS.forEach(btn => btn.addEventListener('click', (e) => {
      QNT.HANDLEqntBtnSelection(parseInt(e.currentTarget.dataset.value))
    }))
    cancelQntBTN.addEventListener('click', () => {QNT.TOGGLEqntInput(false); QNT.TOGGLEqntSubmitBtn(false)});
    expandQntBTN.forEach(x => x.addEventListener('click', () => {QNT.TOGGLEqntInput(true)}))
    fakeQntINPUT.addEventListener('input', (e) => {
      if (e.key === "Enter" || e.keyCode === 13) return;
      QNT.HANDLEfakeQntInputTyping(e.currentTarget)
    })
    fakeQntSubmitBTN.addEventListener('click', () => {QNT.HANDLEfakeQntSubmit('Enter', fakeQntINPUT)})

    
  }
  function SETradioListeners() {
    // colors + sizes
    document.querySelectorAll('input[type="radio"].optionRadio').forEach(optionRADIO => { optionRADIO.addEventListener('change', (e) => {
        const {
          selectedVARIANT,
          ISitemInBag,
          variantBagQNT,
          variantStockQNT,
          toChooseQNT,
          bgCOLOR,
          rawCOLOR
        } = GENERAL.GETradioChangeInfos()

        GENERAL.CHANGEurl(selectedVARIANT, bgCOLOR, rawCOLOR)
        GENERAL.SELECTvariant(selectedVARIANT)
        QNT.HANDLEnewVariantQntReselection(variantStockQNT, variantBagQNT, ISitemInBag, toChooseQNT)

        //FORM.HANDLEformBtns(ISitemInBag, error)
        //FORM.EDITformAlerts(ISitemInBag, error)
        if (optionRADIO.getAttribute("name") == "Color") {
          RADIOS.ADJUSTsizeRadios()
          SWIPER.HANDLEswiperReincertion()
          COLOR.COLORswiper()
          COLOR.color()
        }
      })  
    })
  }
  function SETsubmitBtns(){
    const buyBTN = document.querySelector('.formBtn.buy')
    const addCartBTNS = document.querySelectorAll('.formBtn.addCart')
    const viewCartBTN = document.querySelector('.formBtn.viewCart')

    addCartBTNS.forEach(x => x.addEventListener('click', () => {
      document.querySelector('.form_productPage').submit()
    }))
    buyBTN.addEventListener('click', () => {
      const form = document.querySelector('.form_productPage');
      const input = document.createElement('input');
      input.value = "/checkout";
      input.type = "hidden";
      input.name = "return_to";
  
      form.appendChild(input);
      form.submit();
    })
  }
  function SETswiper(){
    window.addEventListener('resize', () => { SWIPER.SETparallax()})
    const main_slider_btns = document.querySelectorAll('.swiperBtn')
    const btns_colorOptions = document.querySelectorAll('input[name="Color"]')
    const magnifyBTNS = document.querySelectorAll('div[data-zoom]')

    main_slider_btns.forEach(function(el) {
      const is_right = (el.classList.contains('swiper-btn-next'))
      el.addEventListener('mousedown', function() {
        is_right ? el.style.left = "4px" : el.style.left = "-4px"
      });
      el.addEventListener('mouseup', function() {
        el.style.left = "0px"
        el.style.left = "0px"
      });
      el.addEventListener('mouseleave', function() {
        el.style.left = "0px"
        el.style.left = "0px"
      });
      el.addEventListener('touchstart', function() {
        is_right ? el.style.left = "4px" : el.style.left = "-4px"
      });
      el.addEventListener('touchend', function() {
      el.style.left = "0px"
      el.style.left = "0px"
    });
    });
    btns_colorOptions.forEach(x => x.addEventListener('click', () => {
      ZOOM.TOGGLEzoom(1)
      ZOOM.SETdesktopImgDrag()
      setTimeout(() => {ZOOM.SETdesktopImgDrag()}, 300)
    }))
    magnifyBTNS.forEach(x => x.addEventListener('click', (e) => {
      const magnify = e.currentTarget.dataset.zoom
      ZOOM.TOGGLEzoom(Number(magnify))
    }))
  }
  

  return { SETswiper, SETqntListeners, SETradioListeners, SETsubmitBtns, INITIALIZE, INITIALIZEunavailableProduct}
})();

window.addEventListener('DOMContentLoaded', () => {
  if (!ISproductAvailable) {
    EVENTS.INITIALIZEunavailableProduct();
    return;
  };

  EVENTS.INITIALIZE()
  RADIOS.ADJUSTsizeRadios()
  COLOR.COLORradioColorDots()
  EVENTS.SETqntListeners()
  EVENTS.SETradioListeners()
  EVENTS.SETsubmitBtns()
  EVENTS.SETswiper()
})

</script>




{{ '6_inline_slider.js' | asset_url | script_tag }}